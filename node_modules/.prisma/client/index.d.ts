
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Case
 * 
 */
export type Case = $Result.DefaultSelection<Prisma.$CasePayload>
/**
 * Model CaseSection
 * 
 */
export type CaseSection = $Result.DefaultSelection<Prisma.$CaseSectionPayload>
/**
 * Model CaseDrop
 * 
 */
export type CaseDrop = $Result.DefaultSelection<Prisma.$CaseDropPayload>
/**
 * Model GlobalInventoryItem
 * 
 */
export type GlobalInventoryItem = $Result.DefaultSelection<Prisma.$GlobalInventoryItemPayload>
/**
 * Model CaseBattle
 * 
 */
export type CaseBattle = $Result.DefaultSelection<Prisma.$CaseBattlePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.case`: Exposes CRUD operations for the **Case** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.case.findMany()
    * ```
    */
  get case(): Prisma.CaseDelegate<ExtArgs>;

  /**
   * `prisma.caseSection`: Exposes CRUD operations for the **CaseSection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseSections
    * const caseSections = await prisma.caseSection.findMany()
    * ```
    */
  get caseSection(): Prisma.CaseSectionDelegate<ExtArgs>;

  /**
   * `prisma.caseDrop`: Exposes CRUD operations for the **CaseDrop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseDrops
    * const caseDrops = await prisma.caseDrop.findMany()
    * ```
    */
  get caseDrop(): Prisma.CaseDropDelegate<ExtArgs>;

  /**
   * `prisma.globalInventoryItem`: Exposes CRUD operations for the **GlobalInventoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlobalInventoryItems
    * const globalInventoryItems = await prisma.globalInventoryItem.findMany()
    * ```
    */
  get globalInventoryItem(): Prisma.GlobalInventoryItemDelegate<ExtArgs>;

  /**
   * `prisma.caseBattle`: Exposes CRUD operations for the **CaseBattle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseBattles
    * const caseBattles = await prisma.caseBattle.findMany()
    * ```
    */
  get caseBattle(): Prisma.CaseBattleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Item: 'Item',
    Session: 'Session',
    Case: 'Case',
    CaseSection: 'CaseSection',
    CaseDrop: 'CaseDrop',
    GlobalInventoryItem: 'GlobalInventoryItem',
    CaseBattle: 'CaseBattle'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "item" | "session" | "case" | "caseSection" | "caseDrop" | "globalInventoryItem" | "caseBattle"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Case: {
        payload: Prisma.$CasePayload<ExtArgs>
        fields: Prisma.CaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findFirst: {
            args: Prisma.CaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findMany: {
            args: Prisma.CaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          create: {
            args: Prisma.CaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          createMany: {
            args: Prisma.CaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          delete: {
            args: Prisma.CaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          update: {
            args: Prisma.CaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          deleteMany: {
            args: Prisma.CaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          aggregate: {
            args: Prisma.CaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCase>
          }
          groupBy: {
            args: Prisma.CaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseCountArgs<ExtArgs>
            result: $Utils.Optional<CaseCountAggregateOutputType> | number
          }
        }
      }
      CaseSection: {
        payload: Prisma.$CaseSectionPayload<ExtArgs>
        fields: Prisma.CaseSectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseSectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseSectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>
          }
          findFirst: {
            args: Prisma.CaseSectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseSectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>
          }
          findMany: {
            args: Prisma.CaseSectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>[]
          }
          create: {
            args: Prisma.CaseSectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>
          }
          createMany: {
            args: Prisma.CaseSectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseSectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>[]
          }
          delete: {
            args: Prisma.CaseSectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>
          }
          update: {
            args: Prisma.CaseSectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>
          }
          deleteMany: {
            args: Prisma.CaseSectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseSectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseSectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseSectionPayload>
          }
          aggregate: {
            args: Prisma.CaseSectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseSection>
          }
          groupBy: {
            args: Prisma.CaseSectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseSectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseSectionCountArgs<ExtArgs>
            result: $Utils.Optional<CaseSectionCountAggregateOutputType> | number
          }
        }
      }
      CaseDrop: {
        payload: Prisma.$CaseDropPayload<ExtArgs>
        fields: Prisma.CaseDropFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseDropFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseDropFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>
          }
          findFirst: {
            args: Prisma.CaseDropFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseDropFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>
          }
          findMany: {
            args: Prisma.CaseDropFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>[]
          }
          create: {
            args: Prisma.CaseDropCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>
          }
          createMany: {
            args: Prisma.CaseDropCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseDropCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>[]
          }
          delete: {
            args: Prisma.CaseDropDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>
          }
          update: {
            args: Prisma.CaseDropUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>
          }
          deleteMany: {
            args: Prisma.CaseDropDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseDropUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseDropUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseDropPayload>
          }
          aggregate: {
            args: Prisma.CaseDropAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseDrop>
          }
          groupBy: {
            args: Prisma.CaseDropGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseDropGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseDropCountArgs<ExtArgs>
            result: $Utils.Optional<CaseDropCountAggregateOutputType> | number
          }
        }
      }
      GlobalInventoryItem: {
        payload: Prisma.$GlobalInventoryItemPayload<ExtArgs>
        fields: Prisma.GlobalInventoryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlobalInventoryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlobalInventoryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>
          }
          findFirst: {
            args: Prisma.GlobalInventoryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlobalInventoryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>
          }
          findMany: {
            args: Prisma.GlobalInventoryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>[]
          }
          create: {
            args: Prisma.GlobalInventoryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>
          }
          createMany: {
            args: Prisma.GlobalInventoryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GlobalInventoryItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>[]
          }
          delete: {
            args: Prisma.GlobalInventoryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>
          }
          update: {
            args: Prisma.GlobalInventoryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>
          }
          deleteMany: {
            args: Prisma.GlobalInventoryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlobalInventoryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GlobalInventoryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalInventoryItemPayload>
          }
          aggregate: {
            args: Prisma.GlobalInventoryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlobalInventoryItem>
          }
          groupBy: {
            args: Prisma.GlobalInventoryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlobalInventoryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlobalInventoryItemCountArgs<ExtArgs>
            result: $Utils.Optional<GlobalInventoryItemCountAggregateOutputType> | number
          }
        }
      }
      CaseBattle: {
        payload: Prisma.$CaseBattlePayload<ExtArgs>
        fields: Prisma.CaseBattleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseBattleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseBattleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>
          }
          findFirst: {
            args: Prisma.CaseBattleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseBattleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>
          }
          findMany: {
            args: Prisma.CaseBattleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>[]
          }
          create: {
            args: Prisma.CaseBattleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>
          }
          createMany: {
            args: Prisma.CaseBattleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseBattleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>[]
          }
          delete: {
            args: Prisma.CaseBattleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>
          }
          update: {
            args: Prisma.CaseBattleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>
          }
          deleteMany: {
            args: Prisma.CaseBattleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseBattleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaseBattleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseBattlePayload>
          }
          aggregate: {
            args: Prisma.CaseBattleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseBattle>
          }
          groupBy: {
            args: Prisma.CaseBattleGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseBattleGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseBattleCountArgs<ExtArgs>
            result: $Utils.Optional<CaseBattleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    inventory: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | UserCountOutputTypeCountInventoryArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Count Type CaseCountOutputType
   */

  export type CaseCountOutputType = {
    drops: number
  }

  export type CaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    drops?: boolean | CaseCountOutputTypeCountDropsArgs
  }

  // Custom InputTypes
  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseCountOutputType
     */
    select?: CaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountDropsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseDropWhereInput
  }


  /**
   * Count Type CaseSectionCountOutputType
   */

  export type CaseSectionCountOutputType = {
    cases: number
  }

  export type CaseSectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | CaseSectionCountOutputTypeCountCasesArgs
  }

  // Custom InputTypes
  /**
   * CaseSectionCountOutputType without action
   */
  export type CaseSectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSectionCountOutputType
     */
    select?: CaseSectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseSectionCountOutputType without action
   */
  export type CaseSectionCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }


  /**
   * Count Type GlobalInventoryItemCountOutputType
   */

  export type GlobalInventoryItemCountOutputType = {
    CaseDop: number
    Item: number
  }

  export type GlobalInventoryItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CaseDop?: boolean | GlobalInventoryItemCountOutputTypeCountCaseDopArgs
    Item?: boolean | GlobalInventoryItemCountOutputTypeCountItemArgs
  }

  // Custom InputTypes
  /**
   * GlobalInventoryItemCountOutputType without action
   */
  export type GlobalInventoryItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItemCountOutputType
     */
    select?: GlobalInventoryItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GlobalInventoryItemCountOutputType without action
   */
  export type GlobalInventoryItemCountOutputTypeCountCaseDopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseDropWhereInput
  }

  /**
   * GlobalInventoryItemCountOutputType without action
   */
  export type GlobalInventoryItemCountOutputTypeCountItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    balance: number | null
    goldBalance: number | null
  }

  export type UserSumAggregateOutputType = {
    balance: number | null
    goldBalance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    balance: number | null
    goldBalance: number | null
    sandboxMode: boolean | null
    pfpUrl: string | null
    language: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    balance: number | null
    goldBalance: number | null
    sandboxMode: boolean | null
    pfpUrl: string | null
    language: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    passwordHash: number
    balance: number
    goldBalance: number
    sandboxMode: number
    pfpUrl: number
    language: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    balance?: true
    goldBalance?: true
  }

  export type UserSumAggregateInputType = {
    balance?: true
    goldBalance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    balance?: true
    goldBalance?: true
    sandboxMode?: true
    pfpUrl?: true
    language?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    balance?: true
    goldBalance?: true
    sandboxMode?: true
    pfpUrl?: true
    language?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    balance?: true
    goldBalance?: true
    sandboxMode?: true
    pfpUrl?: true
    language?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    passwordHash: string
    balance: number
    goldBalance: number
    sandboxMode: boolean
    pfpUrl: string
    language: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    balance?: boolean
    goldBalance?: boolean
    sandboxMode?: boolean
    pfpUrl?: boolean
    language?: boolean
    inventory?: boolean | User$inventoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    balance?: boolean
    goldBalance?: boolean
    sandboxMode?: boolean
    pfpUrl?: boolean
    language?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    balance?: boolean
    goldBalance?: boolean
    sandboxMode?: boolean
    pfpUrl?: boolean
    language?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | User$inventoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      inventory: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      passwordHash: string
      balance: number
      goldBalance: number
      sandboxMode: boolean
      pfpUrl: string
      language: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends User$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, User$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly balance: FieldRef<"User", 'Float'>
    readonly goldBalance: FieldRef<"User", 'Int'>
    readonly sandboxMode: FieldRef<"User", 'Boolean'>
    readonly pfpUrl: FieldRef<"User", 'String'>
    readonly language: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.inventory
   */
  export type User$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemMinAggregateOutputType = {
    dropId: string | null
    ownerId: string | null
    origin: string | null
    globalInvID: string | null
    dropDate: Date | null
    sold: boolean | null
    upgraded: boolean | null
  }

  export type ItemMaxAggregateOutputType = {
    dropId: string | null
    ownerId: string | null
    origin: string | null
    globalInvID: string | null
    dropDate: Date | null
    sold: boolean | null
    upgraded: boolean | null
  }

  export type ItemCountAggregateOutputType = {
    dropId: number
    ownerId: number
    origin: number
    globalInvID: number
    dropDate: number
    sold: number
    upgraded: number
    _all: number
  }


  export type ItemMinAggregateInputType = {
    dropId?: true
    ownerId?: true
    origin?: true
    globalInvID?: true
    dropDate?: true
    sold?: true
    upgraded?: true
  }

  export type ItemMaxAggregateInputType = {
    dropId?: true
    ownerId?: true
    origin?: true
    globalInvID?: true
    dropDate?: true
    sold?: true
    upgraded?: true
  }

  export type ItemCountAggregateInputType = {
    dropId?: true
    ownerId?: true
    origin?: true
    globalInvID?: true
    dropDate?: true
    sold?: true
    upgraded?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    dropId: string
    ownerId: string
    origin: string
    globalInvID: string
    dropDate: Date
    sold: boolean
    upgraded: boolean
    _count: ItemCountAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dropId?: boolean
    ownerId?: boolean
    origin?: boolean
    globalInvID?: boolean
    dropDate?: boolean
    sold?: boolean
    upgraded?: boolean
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    dropId?: boolean
    ownerId?: boolean
    origin?: boolean
    globalInvID?: boolean
    dropDate?: boolean
    sold?: boolean
    upgraded?: boolean
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectScalar = {
    dropId?: boolean
    ownerId?: boolean
    origin?: boolean
    globalInvID?: boolean
    dropDate?: boolean
    sold?: boolean
    upgraded?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      globalInvItem: Prisma.$GlobalInventoryItemPayload<ExtArgs>
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      dropId: string
      ownerId: string
      origin: string
      globalInvID: string
      dropDate: Date
      sold: boolean
      upgraded: boolean
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `dropId`
     * const itemWithDropIdOnly = await prisma.item.findMany({ select: { dropId: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Items and returns the data saved in the database.
     * @param {ItemCreateManyAndReturnArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Items and only return the `dropId`
     * const itemWithDropIdOnly = await prisma.item.createManyAndReturn({ 
     *   select: { dropId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    globalInvItem<T extends GlobalInventoryItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GlobalInventoryItemDefaultArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly dropId: FieldRef<"Item", 'String'>
    readonly ownerId: FieldRef<"Item", 'String'>
    readonly origin: FieldRef<"Item", 'String'>
    readonly globalInvID: FieldRef<"Item", 'String'>
    readonly dropDate: FieldRef<"Item", 'DateTime'>
    readonly sold: FieldRef<"Item", 'Boolean'>
    readonly upgraded: FieldRef<"Item", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item createManyAndReturn
   */
  export type ItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }


  /**
   * Model Case
   */

  export type AggregateCase = {
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  export type CaseAvgAggregateOutputType = {
    price: number | null
    positionInGrid: number | null
  }

  export type CaseSumAggregateOutputType = {
    price: number | null
    positionInGrid: number | null
  }

  export type CaseMinAggregateOutputType = {
    urlName: string | null
    websiteName: string | null
    price: number | null
    expired: boolean | null
    category: string | null
    goldenCase: boolean | null
    imgName: string | null
    positionInGrid: number | null
  }

  export type CaseMaxAggregateOutputType = {
    urlName: string | null
    websiteName: string | null
    price: number | null
    expired: boolean | null
    category: string | null
    goldenCase: boolean | null
    imgName: string | null
    positionInGrid: number | null
  }

  export type CaseCountAggregateOutputType = {
    urlName: number
    websiteName: number
    price: number
    expired: number
    category: number
    goldenCase: number
    imgName: number
    positionInGrid: number
    _all: number
  }


  export type CaseAvgAggregateInputType = {
    price?: true
    positionInGrid?: true
  }

  export type CaseSumAggregateInputType = {
    price?: true
    positionInGrid?: true
  }

  export type CaseMinAggregateInputType = {
    urlName?: true
    websiteName?: true
    price?: true
    expired?: true
    category?: true
    goldenCase?: true
    imgName?: true
    positionInGrid?: true
  }

  export type CaseMaxAggregateInputType = {
    urlName?: true
    websiteName?: true
    price?: true
    expired?: true
    category?: true
    goldenCase?: true
    imgName?: true
    positionInGrid?: true
  }

  export type CaseCountAggregateInputType = {
    urlName?: true
    websiteName?: true
    price?: true
    expired?: true
    category?: true
    goldenCase?: true
    imgName?: true
    positionInGrid?: true
    _all?: true
  }

  export type CaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Case to aggregate.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseMaxAggregateInputType
  }

  export type GetCaseAggregateType<T extends CaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase[P]>
      : GetScalarType<T[P], AggregateCase[P]>
  }




  export type CaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithAggregationInput | CaseOrderByWithAggregationInput[]
    by: CaseScalarFieldEnum[] | CaseScalarFieldEnum
    having?: CaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseCountAggregateInputType | true
    _avg?: CaseAvgAggregateInputType
    _sum?: CaseSumAggregateInputType
    _min?: CaseMinAggregateInputType
    _max?: CaseMaxAggregateInputType
  }

  export type CaseGroupByOutputType = {
    urlName: string
    websiteName: string
    price: number
    expired: boolean
    category: string | null
    goldenCase: boolean | null
    imgName: string
    positionInGrid: number | null
    _count: CaseCountAggregateOutputType | null
    _avg: CaseAvgAggregateOutputType | null
    _sum: CaseSumAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  type GetCaseGroupByPayload<T extends CaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseGroupByOutputType[P]>
            : GetScalarType<T[P], CaseGroupByOutputType[P]>
        }
      >
    >


  export type CaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    urlName?: boolean
    websiteName?: boolean
    price?: boolean
    expired?: boolean
    category?: boolean
    goldenCase?: boolean
    imgName?: boolean
    positionInGrid?: boolean
    section?: boolean | Case$sectionArgs<ExtArgs>
    drops?: boolean | Case$dropsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    urlName?: boolean
    websiteName?: boolean
    price?: boolean
    expired?: boolean
    category?: boolean
    goldenCase?: boolean
    imgName?: boolean
    positionInGrid?: boolean
    section?: boolean | Case$sectionArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectScalar = {
    urlName?: boolean
    websiteName?: boolean
    price?: boolean
    expired?: boolean
    category?: boolean
    goldenCase?: boolean
    imgName?: boolean
    positionInGrid?: boolean
  }

  export type CaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | Case$sectionArgs<ExtArgs>
    drops?: boolean | Case$dropsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | Case$sectionArgs<ExtArgs>
  }

  export type $CasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Case"
    objects: {
      section: Prisma.$CaseSectionPayload<ExtArgs> | null
      drops: Prisma.$CaseDropPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      urlName: string
      websiteName: string
      price: number
      expired: boolean
      category: string | null
      goldenCase: boolean | null
      imgName: string
      positionInGrid: number | null
    }, ExtArgs["result"]["case"]>
    composites: {}
  }

  type CaseGetPayload<S extends boolean | null | undefined | CaseDefaultArgs> = $Result.GetResult<Prisma.$CasePayload, S>

  type CaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseCountAggregateInputType | true
    }

  export interface CaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Case'], meta: { name: 'Case' } }
    /**
     * Find zero or one Case that matches the filter.
     * @param {CaseFindUniqueArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseFindUniqueArgs>(args: SelectSubset<T, CaseFindUniqueArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Case that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseFindUniqueOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Case that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseFindFirstArgs>(args?: SelectSubset<T, CaseFindFirstArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Case that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.case.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.case.findMany({ take: 10 })
     * 
     * // Only select the `urlName`
     * const caseWithUrlNameOnly = await prisma.case.findMany({ select: { urlName: true } })
     * 
     */
    findMany<T extends CaseFindManyArgs>(args?: SelectSubset<T, CaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Case.
     * @param {CaseCreateArgs} args - Arguments to create a Case.
     * @example
     * // Create one Case
     * const Case = await prisma.case.create({
     *   data: {
     *     // ... data to create a Case
     *   }
     * })
     * 
     */
    create<T extends CaseCreateArgs>(args: SelectSubset<T, CaseCreateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cases.
     * @param {CaseCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseCreateManyArgs>(args?: SelectSubset<T, CaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases and returns the data saved in the database.
     * @param {CaseCreateManyAndReturnArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases and only return the `urlName`
     * const caseWithUrlNameOnly = await prisma.case.createManyAndReturn({ 
     *   select: { urlName: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Case.
     * @param {CaseDeleteArgs} args - Arguments to delete one Case.
     * @example
     * // Delete one Case
     * const Case = await prisma.case.delete({
     *   where: {
     *     // ... filter to delete one Case
     *   }
     * })
     * 
     */
    delete<T extends CaseDeleteArgs>(args: SelectSubset<T, CaseDeleteArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Case.
     * @param {CaseUpdateArgs} args - Arguments to update one Case.
     * @example
     * // Update one Case
     * const case = await prisma.case.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseUpdateArgs>(args: SelectSubset<T, CaseUpdateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cases.
     * @param {CaseDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.case.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDeleteManyArgs>(args?: SelectSubset<T, CaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseUpdateManyArgs>(args: SelectSubset<T, CaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Case.
     * @param {CaseUpsertArgs} args - Arguments to update or create a Case.
     * @example
     * // Update or create a Case
     * const case = await prisma.case.upsert({
     *   create: {
     *     // ... data to create a Case
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case we want to update
     *   }
     * })
     */
    upsert<T extends CaseUpsertArgs>(args: SelectSubset<T, CaseUpsertArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.case.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CaseCountArgs>(
      args?: Subset<T, CaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAggregateArgs>(args: Subset<T, CaseAggregateArgs>): Prisma.PrismaPromise<GetCaseAggregateType<T>>

    /**
     * Group by Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseGroupByArgs['orderBy'] }
        : { orderBy?: CaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Case model
   */
  readonly fields: CaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Case.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    section<T extends Case$sectionArgs<ExtArgs> = {}>(args?: Subset<T, Case$sectionArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    drops<T extends Case$dropsArgs<ExtArgs> = {}>(args?: Subset<T, Case$dropsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Case model
   */ 
  interface CaseFieldRefs {
    readonly urlName: FieldRef<"Case", 'String'>
    readonly websiteName: FieldRef<"Case", 'String'>
    readonly price: FieldRef<"Case", 'Float'>
    readonly expired: FieldRef<"Case", 'Boolean'>
    readonly category: FieldRef<"Case", 'String'>
    readonly goldenCase: FieldRef<"Case", 'Boolean'>
    readonly imgName: FieldRef<"Case", 'String'>
    readonly positionInGrid: FieldRef<"Case", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Case findUnique
   */
  export type CaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findUniqueOrThrow
   */
  export type CaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findFirst
   */
  export type CaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findFirstOrThrow
   */
  export type CaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findMany
   */
  export type CaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case create
   */
  export type CaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Case.
     */
    data: XOR<CaseCreateInput, CaseUncheckedCreateInput>
  }

  /**
   * Case createMany
   */
  export type CaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Case createManyAndReturn
   */
  export type CaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case update
   */
  export type CaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Case.
     */
    data: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
    /**
     * Choose, which Case to update.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case updateMany
   */
  export type CaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
  }

  /**
   * Case upsert
   */
  export type CaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Case to update in case it exists.
     */
    where: CaseWhereUniqueInput
    /**
     * In case the Case found by the `where` argument doesn't exist, create a new Case with this data.
     */
    create: XOR<CaseCreateInput, CaseUncheckedCreateInput>
    /**
     * In case the Case was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
  }

  /**
   * Case delete
   */
  export type CaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter which Case to delete.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case deleteMany
   */
  export type CaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to delete
     */
    where?: CaseWhereInput
  }

  /**
   * Case.section
   */
  export type Case$sectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    where?: CaseSectionWhereInput
  }

  /**
   * Case.drops
   */
  export type Case$dropsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    where?: CaseDropWhereInput
    orderBy?: CaseDropOrderByWithRelationInput | CaseDropOrderByWithRelationInput[]
    cursor?: CaseDropWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseDropScalarFieldEnum | CaseDropScalarFieldEnum[]
  }

  /**
   * Case without action
   */
  export type CaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
  }


  /**
   * Model CaseSection
   */

  export type AggregateCaseSection = {
    _count: CaseSectionCountAggregateOutputType | null
    _avg: CaseSectionAvgAggregateOutputType | null
    _sum: CaseSectionSumAggregateOutputType | null
    _min: CaseSectionMinAggregateOutputType | null
    _max: CaseSectionMaxAggregateOutputType | null
  }

  export type CaseSectionAvgAggregateOutputType = {
    rowSpan: number | null
    colSpan: number | null
    position: number | null
  }

  export type CaseSectionSumAggregateOutputType = {
    rowSpan: number | null
    colSpan: number | null
    position: number | null
  }

  export type CaseSectionMinAggregateOutputType = {
    id: string | null
    name: string | null
    rowSpan: number | null
    colSpan: number | null
    ratio: string | null
    position: number | null
  }

  export type CaseSectionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    rowSpan: number | null
    colSpan: number | null
    ratio: string | null
    position: number | null
  }

  export type CaseSectionCountAggregateOutputType = {
    id: number
    name: number
    rowSpan: number
    colSpan: number
    ratio: number
    position: number
    _all: number
  }


  export type CaseSectionAvgAggregateInputType = {
    rowSpan?: true
    colSpan?: true
    position?: true
  }

  export type CaseSectionSumAggregateInputType = {
    rowSpan?: true
    colSpan?: true
    position?: true
  }

  export type CaseSectionMinAggregateInputType = {
    id?: true
    name?: true
    rowSpan?: true
    colSpan?: true
    ratio?: true
    position?: true
  }

  export type CaseSectionMaxAggregateInputType = {
    id?: true
    name?: true
    rowSpan?: true
    colSpan?: true
    ratio?: true
    position?: true
  }

  export type CaseSectionCountAggregateInputType = {
    id?: true
    name?: true
    rowSpan?: true
    colSpan?: true
    ratio?: true
    position?: true
    _all?: true
  }

  export type CaseSectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseSection to aggregate.
     */
    where?: CaseSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseSections to fetch.
     */
    orderBy?: CaseSectionOrderByWithRelationInput | CaseSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseSections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseSections
    **/
    _count?: true | CaseSectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseSectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseSectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseSectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseSectionMaxAggregateInputType
  }

  export type GetCaseSectionAggregateType<T extends CaseSectionAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseSection[P]>
      : GetScalarType<T[P], AggregateCaseSection[P]>
  }




  export type CaseSectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseSectionWhereInput
    orderBy?: CaseSectionOrderByWithAggregationInput | CaseSectionOrderByWithAggregationInput[]
    by: CaseSectionScalarFieldEnum[] | CaseSectionScalarFieldEnum
    having?: CaseSectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseSectionCountAggregateInputType | true
    _avg?: CaseSectionAvgAggregateInputType
    _sum?: CaseSectionSumAggregateInputType
    _min?: CaseSectionMinAggregateInputType
    _max?: CaseSectionMaxAggregateInputType
  }

  export type CaseSectionGroupByOutputType = {
    id: string
    name: string
    rowSpan: number
    colSpan: number
    ratio: string
    position: number
    _count: CaseSectionCountAggregateOutputType | null
    _avg: CaseSectionAvgAggregateOutputType | null
    _sum: CaseSectionSumAggregateOutputType | null
    _min: CaseSectionMinAggregateOutputType | null
    _max: CaseSectionMaxAggregateOutputType | null
  }

  type GetCaseSectionGroupByPayload<T extends CaseSectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseSectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseSectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseSectionGroupByOutputType[P]>
            : GetScalarType<T[P], CaseSectionGroupByOutputType[P]>
        }
      >
    >


  export type CaseSectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    rowSpan?: boolean
    colSpan?: boolean
    ratio?: boolean
    position?: boolean
    cases?: boolean | CaseSection$casesArgs<ExtArgs>
    _count?: boolean | CaseSectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseSection"]>

  export type CaseSectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    rowSpan?: boolean
    colSpan?: boolean
    ratio?: boolean
    position?: boolean
  }, ExtArgs["result"]["caseSection"]>

  export type CaseSectionSelectScalar = {
    id?: boolean
    name?: boolean
    rowSpan?: boolean
    colSpan?: boolean
    ratio?: boolean
    position?: boolean
  }

  export type CaseSectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | CaseSection$casesArgs<ExtArgs>
    _count?: boolean | CaseSectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseSectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CaseSectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseSection"
    objects: {
      cases: Prisma.$CasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      rowSpan: number
      colSpan: number
      ratio: string
      position: number
    }, ExtArgs["result"]["caseSection"]>
    composites: {}
  }

  type CaseSectionGetPayload<S extends boolean | null | undefined | CaseSectionDefaultArgs> = $Result.GetResult<Prisma.$CaseSectionPayload, S>

  type CaseSectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseSectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseSectionCountAggregateInputType | true
    }

  export interface CaseSectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseSection'], meta: { name: 'CaseSection' } }
    /**
     * Find zero or one CaseSection that matches the filter.
     * @param {CaseSectionFindUniqueArgs} args - Arguments to find a CaseSection
     * @example
     * // Get one CaseSection
     * const caseSection = await prisma.caseSection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseSectionFindUniqueArgs>(args: SelectSubset<T, CaseSectionFindUniqueArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseSection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseSectionFindUniqueOrThrowArgs} args - Arguments to find a CaseSection
     * @example
     * // Get one CaseSection
     * const caseSection = await prisma.caseSection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseSectionFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseSectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseSection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseSectionFindFirstArgs} args - Arguments to find a CaseSection
     * @example
     * // Get one CaseSection
     * const caseSection = await prisma.caseSection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseSectionFindFirstArgs>(args?: SelectSubset<T, CaseSectionFindFirstArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseSection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseSectionFindFirstOrThrowArgs} args - Arguments to find a CaseSection
     * @example
     * // Get one CaseSection
     * const caseSection = await prisma.caseSection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseSectionFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseSectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseSections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseSectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseSections
     * const caseSections = await prisma.caseSection.findMany()
     * 
     * // Get first 10 CaseSections
     * const caseSections = await prisma.caseSection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseSectionWithIdOnly = await prisma.caseSection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseSectionFindManyArgs>(args?: SelectSubset<T, CaseSectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseSection.
     * @param {CaseSectionCreateArgs} args - Arguments to create a CaseSection.
     * @example
     * // Create one CaseSection
     * const CaseSection = await prisma.caseSection.create({
     *   data: {
     *     // ... data to create a CaseSection
     *   }
     * })
     * 
     */
    create<T extends CaseSectionCreateArgs>(args: SelectSubset<T, CaseSectionCreateArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseSections.
     * @param {CaseSectionCreateManyArgs} args - Arguments to create many CaseSections.
     * @example
     * // Create many CaseSections
     * const caseSection = await prisma.caseSection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseSectionCreateManyArgs>(args?: SelectSubset<T, CaseSectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseSections and returns the data saved in the database.
     * @param {CaseSectionCreateManyAndReturnArgs} args - Arguments to create many CaseSections.
     * @example
     * // Create many CaseSections
     * const caseSection = await prisma.caseSection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseSections and only return the `id`
     * const caseSectionWithIdOnly = await prisma.caseSection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseSectionCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseSectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseSection.
     * @param {CaseSectionDeleteArgs} args - Arguments to delete one CaseSection.
     * @example
     * // Delete one CaseSection
     * const CaseSection = await prisma.caseSection.delete({
     *   where: {
     *     // ... filter to delete one CaseSection
     *   }
     * })
     * 
     */
    delete<T extends CaseSectionDeleteArgs>(args: SelectSubset<T, CaseSectionDeleteArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseSection.
     * @param {CaseSectionUpdateArgs} args - Arguments to update one CaseSection.
     * @example
     * // Update one CaseSection
     * const caseSection = await prisma.caseSection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseSectionUpdateArgs>(args: SelectSubset<T, CaseSectionUpdateArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseSections.
     * @param {CaseSectionDeleteManyArgs} args - Arguments to filter CaseSections to delete.
     * @example
     * // Delete a few CaseSections
     * const { count } = await prisma.caseSection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseSectionDeleteManyArgs>(args?: SelectSubset<T, CaseSectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseSections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseSectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseSections
     * const caseSection = await prisma.caseSection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseSectionUpdateManyArgs>(args: SelectSubset<T, CaseSectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseSection.
     * @param {CaseSectionUpsertArgs} args - Arguments to update or create a CaseSection.
     * @example
     * // Update or create a CaseSection
     * const caseSection = await prisma.caseSection.upsert({
     *   create: {
     *     // ... data to create a CaseSection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseSection we want to update
     *   }
     * })
     */
    upsert<T extends CaseSectionUpsertArgs>(args: SelectSubset<T, CaseSectionUpsertArgs<ExtArgs>>): Prisma__CaseSectionClient<$Result.GetResult<Prisma.$CaseSectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseSections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseSectionCountArgs} args - Arguments to filter CaseSections to count.
     * @example
     * // Count the number of CaseSections
     * const count = await prisma.caseSection.count({
     *   where: {
     *     // ... the filter for the CaseSections we want to count
     *   }
     * })
    **/
    count<T extends CaseSectionCountArgs>(
      args?: Subset<T, CaseSectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseSectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseSection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseSectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseSectionAggregateArgs>(args: Subset<T, CaseSectionAggregateArgs>): Prisma.PrismaPromise<GetCaseSectionAggregateType<T>>

    /**
     * Group by CaseSection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseSectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseSectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseSectionGroupByArgs['orderBy'] }
        : { orderBy?: CaseSectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseSectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseSection model
   */
  readonly fields: CaseSectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseSection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseSectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cases<T extends CaseSection$casesArgs<ExtArgs> = {}>(args?: Subset<T, CaseSection$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseSection model
   */ 
  interface CaseSectionFieldRefs {
    readonly id: FieldRef<"CaseSection", 'String'>
    readonly name: FieldRef<"CaseSection", 'String'>
    readonly rowSpan: FieldRef<"CaseSection", 'Int'>
    readonly colSpan: FieldRef<"CaseSection", 'Int'>
    readonly ratio: FieldRef<"CaseSection", 'String'>
    readonly position: FieldRef<"CaseSection", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CaseSection findUnique
   */
  export type CaseSectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * Filter, which CaseSection to fetch.
     */
    where: CaseSectionWhereUniqueInput
  }

  /**
   * CaseSection findUniqueOrThrow
   */
  export type CaseSectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * Filter, which CaseSection to fetch.
     */
    where: CaseSectionWhereUniqueInput
  }

  /**
   * CaseSection findFirst
   */
  export type CaseSectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * Filter, which CaseSection to fetch.
     */
    where?: CaseSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseSections to fetch.
     */
    orderBy?: CaseSectionOrderByWithRelationInput | CaseSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseSections.
     */
    cursor?: CaseSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseSections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseSections.
     */
    distinct?: CaseSectionScalarFieldEnum | CaseSectionScalarFieldEnum[]
  }

  /**
   * CaseSection findFirstOrThrow
   */
  export type CaseSectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * Filter, which CaseSection to fetch.
     */
    where?: CaseSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseSections to fetch.
     */
    orderBy?: CaseSectionOrderByWithRelationInput | CaseSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseSections.
     */
    cursor?: CaseSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseSections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseSections.
     */
    distinct?: CaseSectionScalarFieldEnum | CaseSectionScalarFieldEnum[]
  }

  /**
   * CaseSection findMany
   */
  export type CaseSectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * Filter, which CaseSections to fetch.
     */
    where?: CaseSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseSections to fetch.
     */
    orderBy?: CaseSectionOrderByWithRelationInput | CaseSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseSections.
     */
    cursor?: CaseSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseSections.
     */
    skip?: number
    distinct?: CaseSectionScalarFieldEnum | CaseSectionScalarFieldEnum[]
  }

  /**
   * CaseSection create
   */
  export type CaseSectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseSection.
     */
    data: XOR<CaseSectionCreateInput, CaseSectionUncheckedCreateInput>
  }

  /**
   * CaseSection createMany
   */
  export type CaseSectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseSections.
     */
    data: CaseSectionCreateManyInput | CaseSectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseSection createManyAndReturn
   */
  export type CaseSectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseSections.
     */
    data: CaseSectionCreateManyInput | CaseSectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseSection update
   */
  export type CaseSectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseSection.
     */
    data: XOR<CaseSectionUpdateInput, CaseSectionUncheckedUpdateInput>
    /**
     * Choose, which CaseSection to update.
     */
    where: CaseSectionWhereUniqueInput
  }

  /**
   * CaseSection updateMany
   */
  export type CaseSectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseSections.
     */
    data: XOR<CaseSectionUpdateManyMutationInput, CaseSectionUncheckedUpdateManyInput>
    /**
     * Filter which CaseSections to update
     */
    where?: CaseSectionWhereInput
  }

  /**
   * CaseSection upsert
   */
  export type CaseSectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseSection to update in case it exists.
     */
    where: CaseSectionWhereUniqueInput
    /**
     * In case the CaseSection found by the `where` argument doesn't exist, create a new CaseSection with this data.
     */
    create: XOR<CaseSectionCreateInput, CaseSectionUncheckedCreateInput>
    /**
     * In case the CaseSection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseSectionUpdateInput, CaseSectionUncheckedUpdateInput>
  }

  /**
   * CaseSection delete
   */
  export type CaseSectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
    /**
     * Filter which CaseSection to delete.
     */
    where: CaseSectionWhereUniqueInput
  }

  /**
   * CaseSection deleteMany
   */
  export type CaseSectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseSections to delete
     */
    where?: CaseSectionWhereInput
  }

  /**
   * CaseSection.cases
   */
  export type CaseSection$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * CaseSection without action
   */
  export type CaseSectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseSection
     */
    select?: CaseSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseSectionInclude<ExtArgs> | null
  }


  /**
   * Model CaseDrop
   */

  export type AggregateCaseDrop = {
    _count: CaseDropCountAggregateOutputType | null
    _avg: CaseDropAvgAggregateOutputType | null
    _sum: CaseDropSumAggregateOutputType | null
    _min: CaseDropMinAggregateOutputType | null
    _max: CaseDropMaxAggregateOutputType | null
  }

  export type CaseDropAvgAggregateOutputType = {
    skinPrice: number | null
    oddsRange: number | null
  }

  export type CaseDropSumAggregateOutputType = {
    skinPrice: number | null
    oddsRange: number[]
  }

  export type CaseDropMinAggregateOutputType = {
    id: string | null
    globalInvID: string | null
    weaponName: string | null
    skinName: string | null
    skinQuality: string | null
    skinPrice: number | null
    skinRarity: string | null
    skinImgSource: string | null
    stattrack: boolean | null
    parentCase: string | null
    displayOdds: string | null
    priceRange: string | null
    displayChance: string | null
  }

  export type CaseDropMaxAggregateOutputType = {
    id: string | null
    globalInvID: string | null
    weaponName: string | null
    skinName: string | null
    skinQuality: string | null
    skinPrice: number | null
    skinRarity: string | null
    skinImgSource: string | null
    stattrack: boolean | null
    parentCase: string | null
    displayOdds: string | null
    priceRange: string | null
    displayChance: string | null
  }

  export type CaseDropCountAggregateOutputType = {
    id: number
    globalInvID: number
    weaponName: number
    skinName: number
    skinQuality: number
    skinPrice: number
    skinRarity: number
    skinImgSource: number
    stattrack: number
    parentCase: number
    displayOdds: number
    oddsRange: number
    priceRange: number
    displayChance: number
    _all: number
  }


  export type CaseDropAvgAggregateInputType = {
    skinPrice?: true
    oddsRange?: true
  }

  export type CaseDropSumAggregateInputType = {
    skinPrice?: true
    oddsRange?: true
  }

  export type CaseDropMinAggregateInputType = {
    id?: true
    globalInvID?: true
    weaponName?: true
    skinName?: true
    skinQuality?: true
    skinPrice?: true
    skinRarity?: true
    skinImgSource?: true
    stattrack?: true
    parentCase?: true
    displayOdds?: true
    priceRange?: true
    displayChance?: true
  }

  export type CaseDropMaxAggregateInputType = {
    id?: true
    globalInvID?: true
    weaponName?: true
    skinName?: true
    skinQuality?: true
    skinPrice?: true
    skinRarity?: true
    skinImgSource?: true
    stattrack?: true
    parentCase?: true
    displayOdds?: true
    priceRange?: true
    displayChance?: true
  }

  export type CaseDropCountAggregateInputType = {
    id?: true
    globalInvID?: true
    weaponName?: true
    skinName?: true
    skinQuality?: true
    skinPrice?: true
    skinRarity?: true
    skinImgSource?: true
    stattrack?: true
    parentCase?: true
    displayOdds?: true
    oddsRange?: true
    priceRange?: true
    displayChance?: true
    _all?: true
  }

  export type CaseDropAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseDrop to aggregate.
     */
    where?: CaseDropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDrops to fetch.
     */
    orderBy?: CaseDropOrderByWithRelationInput | CaseDropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseDropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDrops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDrops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseDrops
    **/
    _count?: true | CaseDropCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseDropAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseDropSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseDropMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseDropMaxAggregateInputType
  }

  export type GetCaseDropAggregateType<T extends CaseDropAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseDrop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseDrop[P]>
      : GetScalarType<T[P], AggregateCaseDrop[P]>
  }




  export type CaseDropGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseDropWhereInput
    orderBy?: CaseDropOrderByWithAggregationInput | CaseDropOrderByWithAggregationInput[]
    by: CaseDropScalarFieldEnum[] | CaseDropScalarFieldEnum
    having?: CaseDropScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseDropCountAggregateInputType | true
    _avg?: CaseDropAvgAggregateInputType
    _sum?: CaseDropSumAggregateInputType
    _min?: CaseDropMinAggregateInputType
    _max?: CaseDropMaxAggregateInputType
  }

  export type CaseDropGroupByOutputType = {
    id: string
    globalInvID: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack: boolean
    parentCase: string
    displayOdds: string
    oddsRange: number[]
    priceRange: string
    displayChance: string
    _count: CaseDropCountAggregateOutputType | null
    _avg: CaseDropAvgAggregateOutputType | null
    _sum: CaseDropSumAggregateOutputType | null
    _min: CaseDropMinAggregateOutputType | null
    _max: CaseDropMaxAggregateOutputType | null
  }

  type GetCaseDropGroupByPayload<T extends CaseDropGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseDropGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseDropGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseDropGroupByOutputType[P]>
            : GetScalarType<T[P], CaseDropGroupByOutputType[P]>
        }
      >
    >


  export type CaseDropSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    globalInvID?: boolean
    weaponName?: boolean
    skinName?: boolean
    skinQuality?: boolean
    skinPrice?: boolean
    skinRarity?: boolean
    skinImgSource?: boolean
    stattrack?: boolean
    parentCase?: boolean
    displayOdds?: boolean
    oddsRange?: boolean
    priceRange?: boolean
    displayChance?: boolean
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseDrop"]>

  export type CaseDropSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    globalInvID?: boolean
    weaponName?: boolean
    skinName?: boolean
    skinQuality?: boolean
    skinPrice?: boolean
    skinRarity?: boolean
    skinImgSource?: boolean
    stattrack?: boolean
    parentCase?: boolean
    displayOdds?: boolean
    oddsRange?: boolean
    priceRange?: boolean
    displayChance?: boolean
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseDrop"]>

  export type CaseDropSelectScalar = {
    id?: boolean
    globalInvID?: boolean
    weaponName?: boolean
    skinName?: boolean
    skinQuality?: boolean
    skinPrice?: boolean
    skinRarity?: boolean
    skinImgSource?: boolean
    stattrack?: boolean
    parentCase?: boolean
    displayOdds?: boolean
    oddsRange?: boolean
    priceRange?: boolean
    displayChance?: boolean
  }

  export type CaseDropInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type CaseDropIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    globalInvItem?: boolean | GlobalInventoryItemDefaultArgs<ExtArgs>
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $CaseDropPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseDrop"
    objects: {
      globalInvItem: Prisma.$GlobalInventoryItemPayload<ExtArgs>
      case: Prisma.$CasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      globalInvID: string
      weaponName: string
      skinName: string
      skinQuality: string
      skinPrice: number
      skinRarity: string
      skinImgSource: string
      stattrack: boolean
      parentCase: string
      displayOdds: string
      oddsRange: number[]
      priceRange: string
      displayChance: string
    }, ExtArgs["result"]["caseDrop"]>
    composites: {}
  }

  type CaseDropGetPayload<S extends boolean | null | undefined | CaseDropDefaultArgs> = $Result.GetResult<Prisma.$CaseDropPayload, S>

  type CaseDropCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseDropFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseDropCountAggregateInputType | true
    }

  export interface CaseDropDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseDrop'], meta: { name: 'CaseDrop' } }
    /**
     * Find zero or one CaseDrop that matches the filter.
     * @param {CaseDropFindUniqueArgs} args - Arguments to find a CaseDrop
     * @example
     * // Get one CaseDrop
     * const caseDrop = await prisma.caseDrop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseDropFindUniqueArgs>(args: SelectSubset<T, CaseDropFindUniqueArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseDrop that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseDropFindUniqueOrThrowArgs} args - Arguments to find a CaseDrop
     * @example
     * // Get one CaseDrop
     * const caseDrop = await prisma.caseDrop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseDropFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseDropFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseDrop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDropFindFirstArgs} args - Arguments to find a CaseDrop
     * @example
     * // Get one CaseDrop
     * const caseDrop = await prisma.caseDrop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseDropFindFirstArgs>(args?: SelectSubset<T, CaseDropFindFirstArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseDrop that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDropFindFirstOrThrowArgs} args - Arguments to find a CaseDrop
     * @example
     * // Get one CaseDrop
     * const caseDrop = await prisma.caseDrop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseDropFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseDropFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseDrops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDropFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseDrops
     * const caseDrops = await prisma.caseDrop.findMany()
     * 
     * // Get first 10 CaseDrops
     * const caseDrops = await prisma.caseDrop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseDropWithIdOnly = await prisma.caseDrop.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseDropFindManyArgs>(args?: SelectSubset<T, CaseDropFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseDrop.
     * @param {CaseDropCreateArgs} args - Arguments to create a CaseDrop.
     * @example
     * // Create one CaseDrop
     * const CaseDrop = await prisma.caseDrop.create({
     *   data: {
     *     // ... data to create a CaseDrop
     *   }
     * })
     * 
     */
    create<T extends CaseDropCreateArgs>(args: SelectSubset<T, CaseDropCreateArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseDrops.
     * @param {CaseDropCreateManyArgs} args - Arguments to create many CaseDrops.
     * @example
     * // Create many CaseDrops
     * const caseDrop = await prisma.caseDrop.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseDropCreateManyArgs>(args?: SelectSubset<T, CaseDropCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseDrops and returns the data saved in the database.
     * @param {CaseDropCreateManyAndReturnArgs} args - Arguments to create many CaseDrops.
     * @example
     * // Create many CaseDrops
     * const caseDrop = await prisma.caseDrop.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseDrops and only return the `id`
     * const caseDropWithIdOnly = await prisma.caseDrop.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseDropCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseDropCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseDrop.
     * @param {CaseDropDeleteArgs} args - Arguments to delete one CaseDrop.
     * @example
     * // Delete one CaseDrop
     * const CaseDrop = await prisma.caseDrop.delete({
     *   where: {
     *     // ... filter to delete one CaseDrop
     *   }
     * })
     * 
     */
    delete<T extends CaseDropDeleteArgs>(args: SelectSubset<T, CaseDropDeleteArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseDrop.
     * @param {CaseDropUpdateArgs} args - Arguments to update one CaseDrop.
     * @example
     * // Update one CaseDrop
     * const caseDrop = await prisma.caseDrop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseDropUpdateArgs>(args: SelectSubset<T, CaseDropUpdateArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseDrops.
     * @param {CaseDropDeleteManyArgs} args - Arguments to filter CaseDrops to delete.
     * @example
     * // Delete a few CaseDrops
     * const { count } = await prisma.caseDrop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDropDeleteManyArgs>(args?: SelectSubset<T, CaseDropDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseDrops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDropUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseDrops
     * const caseDrop = await prisma.caseDrop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseDropUpdateManyArgs>(args: SelectSubset<T, CaseDropUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseDrop.
     * @param {CaseDropUpsertArgs} args - Arguments to update or create a CaseDrop.
     * @example
     * // Update or create a CaseDrop
     * const caseDrop = await prisma.caseDrop.upsert({
     *   create: {
     *     // ... data to create a CaseDrop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseDrop we want to update
     *   }
     * })
     */
    upsert<T extends CaseDropUpsertArgs>(args: SelectSubset<T, CaseDropUpsertArgs<ExtArgs>>): Prisma__CaseDropClient<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseDrops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDropCountArgs} args - Arguments to filter CaseDrops to count.
     * @example
     * // Count the number of CaseDrops
     * const count = await prisma.caseDrop.count({
     *   where: {
     *     // ... the filter for the CaseDrops we want to count
     *   }
     * })
    **/
    count<T extends CaseDropCountArgs>(
      args?: Subset<T, CaseDropCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseDropCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseDrop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDropAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseDropAggregateArgs>(args: Subset<T, CaseDropAggregateArgs>): Prisma.PrismaPromise<GetCaseDropAggregateType<T>>

    /**
     * Group by CaseDrop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseDropGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseDropGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseDropGroupByArgs['orderBy'] }
        : { orderBy?: CaseDropGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseDropGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseDropGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseDrop model
   */
  readonly fields: CaseDropFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseDrop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseDropClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    globalInvItem<T extends GlobalInventoryItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GlobalInventoryItemDefaultArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseDrop model
   */ 
  interface CaseDropFieldRefs {
    readonly id: FieldRef<"CaseDrop", 'String'>
    readonly globalInvID: FieldRef<"CaseDrop", 'String'>
    readonly weaponName: FieldRef<"CaseDrop", 'String'>
    readonly skinName: FieldRef<"CaseDrop", 'String'>
    readonly skinQuality: FieldRef<"CaseDrop", 'String'>
    readonly skinPrice: FieldRef<"CaseDrop", 'Float'>
    readonly skinRarity: FieldRef<"CaseDrop", 'String'>
    readonly skinImgSource: FieldRef<"CaseDrop", 'String'>
    readonly stattrack: FieldRef<"CaseDrop", 'Boolean'>
    readonly parentCase: FieldRef<"CaseDrop", 'String'>
    readonly displayOdds: FieldRef<"CaseDrop", 'String'>
    readonly oddsRange: FieldRef<"CaseDrop", 'Int[]'>
    readonly priceRange: FieldRef<"CaseDrop", 'String'>
    readonly displayChance: FieldRef<"CaseDrop", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CaseDrop findUnique
   */
  export type CaseDropFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * Filter, which CaseDrop to fetch.
     */
    where: CaseDropWhereUniqueInput
  }

  /**
   * CaseDrop findUniqueOrThrow
   */
  export type CaseDropFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * Filter, which CaseDrop to fetch.
     */
    where: CaseDropWhereUniqueInput
  }

  /**
   * CaseDrop findFirst
   */
  export type CaseDropFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * Filter, which CaseDrop to fetch.
     */
    where?: CaseDropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDrops to fetch.
     */
    orderBy?: CaseDropOrderByWithRelationInput | CaseDropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseDrops.
     */
    cursor?: CaseDropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDrops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDrops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseDrops.
     */
    distinct?: CaseDropScalarFieldEnum | CaseDropScalarFieldEnum[]
  }

  /**
   * CaseDrop findFirstOrThrow
   */
  export type CaseDropFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * Filter, which CaseDrop to fetch.
     */
    where?: CaseDropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDrops to fetch.
     */
    orderBy?: CaseDropOrderByWithRelationInput | CaseDropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseDrops.
     */
    cursor?: CaseDropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDrops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDrops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseDrops.
     */
    distinct?: CaseDropScalarFieldEnum | CaseDropScalarFieldEnum[]
  }

  /**
   * CaseDrop findMany
   */
  export type CaseDropFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * Filter, which CaseDrops to fetch.
     */
    where?: CaseDropWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseDrops to fetch.
     */
    orderBy?: CaseDropOrderByWithRelationInput | CaseDropOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseDrops.
     */
    cursor?: CaseDropWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseDrops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseDrops.
     */
    skip?: number
    distinct?: CaseDropScalarFieldEnum | CaseDropScalarFieldEnum[]
  }

  /**
   * CaseDrop create
   */
  export type CaseDropCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseDrop.
     */
    data: XOR<CaseDropCreateInput, CaseDropUncheckedCreateInput>
  }

  /**
   * CaseDrop createMany
   */
  export type CaseDropCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseDrops.
     */
    data: CaseDropCreateManyInput | CaseDropCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseDrop createManyAndReturn
   */
  export type CaseDropCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseDrops.
     */
    data: CaseDropCreateManyInput | CaseDropCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseDrop update
   */
  export type CaseDropUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseDrop.
     */
    data: XOR<CaseDropUpdateInput, CaseDropUncheckedUpdateInput>
    /**
     * Choose, which CaseDrop to update.
     */
    where: CaseDropWhereUniqueInput
  }

  /**
   * CaseDrop updateMany
   */
  export type CaseDropUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseDrops.
     */
    data: XOR<CaseDropUpdateManyMutationInput, CaseDropUncheckedUpdateManyInput>
    /**
     * Filter which CaseDrops to update
     */
    where?: CaseDropWhereInput
  }

  /**
   * CaseDrop upsert
   */
  export type CaseDropUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseDrop to update in case it exists.
     */
    where: CaseDropWhereUniqueInput
    /**
     * In case the CaseDrop found by the `where` argument doesn't exist, create a new CaseDrop with this data.
     */
    create: XOR<CaseDropCreateInput, CaseDropUncheckedCreateInput>
    /**
     * In case the CaseDrop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseDropUpdateInput, CaseDropUncheckedUpdateInput>
  }

  /**
   * CaseDrop delete
   */
  export type CaseDropDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    /**
     * Filter which CaseDrop to delete.
     */
    where: CaseDropWhereUniqueInput
  }

  /**
   * CaseDrop deleteMany
   */
  export type CaseDropDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseDrops to delete
     */
    where?: CaseDropWhereInput
  }

  /**
   * CaseDrop without action
   */
  export type CaseDropDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
  }


  /**
   * Model GlobalInventoryItem
   */

  export type AggregateGlobalInventoryItem = {
    _count: GlobalInventoryItemCountAggregateOutputType | null
    _avg: GlobalInventoryItemAvgAggregateOutputType | null
    _sum: GlobalInventoryItemSumAggregateOutputType | null
    _min: GlobalInventoryItemMinAggregateOutputType | null
    _max: GlobalInventoryItemMaxAggregateOutputType | null
  }

  export type GlobalInventoryItemAvgAggregateOutputType = {
    skinPrice: number | null
  }

  export type GlobalInventoryItemSumAggregateOutputType = {
    skinPrice: number | null
  }

  export type GlobalInventoryItemMinAggregateOutputType = {
    id: string | null
    weaponName: string | null
    skinName: string | null
    skinQuality: string | null
    skinPrice: number | null
    skinRarity: string | null
    skinImgSource: string | null
    stattrack: boolean | null
  }

  export type GlobalInventoryItemMaxAggregateOutputType = {
    id: string | null
    weaponName: string | null
    skinName: string | null
    skinQuality: string | null
    skinPrice: number | null
    skinRarity: string | null
    skinImgSource: string | null
    stattrack: boolean | null
  }

  export type GlobalInventoryItemCountAggregateOutputType = {
    id: number
    weaponName: number
    skinName: number
    skinQuality: number
    skinPrice: number
    skinRarity: number
    skinImgSource: number
    stattrack: number
    _all: number
  }


  export type GlobalInventoryItemAvgAggregateInputType = {
    skinPrice?: true
  }

  export type GlobalInventoryItemSumAggregateInputType = {
    skinPrice?: true
  }

  export type GlobalInventoryItemMinAggregateInputType = {
    id?: true
    weaponName?: true
    skinName?: true
    skinQuality?: true
    skinPrice?: true
    skinRarity?: true
    skinImgSource?: true
    stattrack?: true
  }

  export type GlobalInventoryItemMaxAggregateInputType = {
    id?: true
    weaponName?: true
    skinName?: true
    skinQuality?: true
    skinPrice?: true
    skinRarity?: true
    skinImgSource?: true
    stattrack?: true
  }

  export type GlobalInventoryItemCountAggregateInputType = {
    id?: true
    weaponName?: true
    skinName?: true
    skinQuality?: true
    skinPrice?: true
    skinRarity?: true
    skinImgSource?: true
    stattrack?: true
    _all?: true
  }

  export type GlobalInventoryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalInventoryItem to aggregate.
     */
    where?: GlobalInventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalInventoryItems to fetch.
     */
    orderBy?: GlobalInventoryItemOrderByWithRelationInput | GlobalInventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlobalInventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalInventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalInventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlobalInventoryItems
    **/
    _count?: true | GlobalInventoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GlobalInventoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GlobalInventoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlobalInventoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlobalInventoryItemMaxAggregateInputType
  }

  export type GetGlobalInventoryItemAggregateType<T extends GlobalInventoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateGlobalInventoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlobalInventoryItem[P]>
      : GetScalarType<T[P], AggregateGlobalInventoryItem[P]>
  }




  export type GlobalInventoryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlobalInventoryItemWhereInput
    orderBy?: GlobalInventoryItemOrderByWithAggregationInput | GlobalInventoryItemOrderByWithAggregationInput[]
    by: GlobalInventoryItemScalarFieldEnum[] | GlobalInventoryItemScalarFieldEnum
    having?: GlobalInventoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlobalInventoryItemCountAggregateInputType | true
    _avg?: GlobalInventoryItemAvgAggregateInputType
    _sum?: GlobalInventoryItemSumAggregateInputType
    _min?: GlobalInventoryItemMinAggregateInputType
    _max?: GlobalInventoryItemMaxAggregateInputType
  }

  export type GlobalInventoryItemGroupByOutputType = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack: boolean
    _count: GlobalInventoryItemCountAggregateOutputType | null
    _avg: GlobalInventoryItemAvgAggregateOutputType | null
    _sum: GlobalInventoryItemSumAggregateOutputType | null
    _min: GlobalInventoryItemMinAggregateOutputType | null
    _max: GlobalInventoryItemMaxAggregateOutputType | null
  }

  type GetGlobalInventoryItemGroupByPayload<T extends GlobalInventoryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlobalInventoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlobalInventoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlobalInventoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], GlobalInventoryItemGroupByOutputType[P]>
        }
      >
    >


  export type GlobalInventoryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    weaponName?: boolean
    skinName?: boolean
    skinQuality?: boolean
    skinPrice?: boolean
    skinRarity?: boolean
    skinImgSource?: boolean
    stattrack?: boolean
    CaseDop?: boolean | GlobalInventoryItem$CaseDopArgs<ExtArgs>
    Item?: boolean | GlobalInventoryItem$ItemArgs<ExtArgs>
    _count?: boolean | GlobalInventoryItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["globalInventoryItem"]>

  export type GlobalInventoryItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    weaponName?: boolean
    skinName?: boolean
    skinQuality?: boolean
    skinPrice?: boolean
    skinRarity?: boolean
    skinImgSource?: boolean
    stattrack?: boolean
  }, ExtArgs["result"]["globalInventoryItem"]>

  export type GlobalInventoryItemSelectScalar = {
    id?: boolean
    weaponName?: boolean
    skinName?: boolean
    skinQuality?: boolean
    skinPrice?: boolean
    skinRarity?: boolean
    skinImgSource?: boolean
    stattrack?: boolean
  }

  export type GlobalInventoryItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CaseDop?: boolean | GlobalInventoryItem$CaseDopArgs<ExtArgs>
    Item?: boolean | GlobalInventoryItem$ItemArgs<ExtArgs>
    _count?: boolean | GlobalInventoryItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GlobalInventoryItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GlobalInventoryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlobalInventoryItem"
    objects: {
      CaseDop: Prisma.$CaseDropPayload<ExtArgs>[]
      Item: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      weaponName: string
      skinName: string
      skinQuality: string
      skinPrice: number
      skinRarity: string
      skinImgSource: string
      stattrack: boolean
    }, ExtArgs["result"]["globalInventoryItem"]>
    composites: {}
  }

  type GlobalInventoryItemGetPayload<S extends boolean | null | undefined | GlobalInventoryItemDefaultArgs> = $Result.GetResult<Prisma.$GlobalInventoryItemPayload, S>

  type GlobalInventoryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GlobalInventoryItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GlobalInventoryItemCountAggregateInputType | true
    }

  export interface GlobalInventoryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlobalInventoryItem'], meta: { name: 'GlobalInventoryItem' } }
    /**
     * Find zero or one GlobalInventoryItem that matches the filter.
     * @param {GlobalInventoryItemFindUniqueArgs} args - Arguments to find a GlobalInventoryItem
     * @example
     * // Get one GlobalInventoryItem
     * const globalInventoryItem = await prisma.globalInventoryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlobalInventoryItemFindUniqueArgs>(args: SelectSubset<T, GlobalInventoryItemFindUniqueArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GlobalInventoryItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GlobalInventoryItemFindUniqueOrThrowArgs} args - Arguments to find a GlobalInventoryItem
     * @example
     * // Get one GlobalInventoryItem
     * const globalInventoryItem = await prisma.globalInventoryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlobalInventoryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, GlobalInventoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GlobalInventoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalInventoryItemFindFirstArgs} args - Arguments to find a GlobalInventoryItem
     * @example
     * // Get one GlobalInventoryItem
     * const globalInventoryItem = await prisma.globalInventoryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlobalInventoryItemFindFirstArgs>(args?: SelectSubset<T, GlobalInventoryItemFindFirstArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GlobalInventoryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalInventoryItemFindFirstOrThrowArgs} args - Arguments to find a GlobalInventoryItem
     * @example
     * // Get one GlobalInventoryItem
     * const globalInventoryItem = await prisma.globalInventoryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlobalInventoryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, GlobalInventoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GlobalInventoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalInventoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlobalInventoryItems
     * const globalInventoryItems = await prisma.globalInventoryItem.findMany()
     * 
     * // Get first 10 GlobalInventoryItems
     * const globalInventoryItems = await prisma.globalInventoryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const globalInventoryItemWithIdOnly = await prisma.globalInventoryItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlobalInventoryItemFindManyArgs>(args?: SelectSubset<T, GlobalInventoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GlobalInventoryItem.
     * @param {GlobalInventoryItemCreateArgs} args - Arguments to create a GlobalInventoryItem.
     * @example
     * // Create one GlobalInventoryItem
     * const GlobalInventoryItem = await prisma.globalInventoryItem.create({
     *   data: {
     *     // ... data to create a GlobalInventoryItem
     *   }
     * })
     * 
     */
    create<T extends GlobalInventoryItemCreateArgs>(args: SelectSubset<T, GlobalInventoryItemCreateArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GlobalInventoryItems.
     * @param {GlobalInventoryItemCreateManyArgs} args - Arguments to create many GlobalInventoryItems.
     * @example
     * // Create many GlobalInventoryItems
     * const globalInventoryItem = await prisma.globalInventoryItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlobalInventoryItemCreateManyArgs>(args?: SelectSubset<T, GlobalInventoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GlobalInventoryItems and returns the data saved in the database.
     * @param {GlobalInventoryItemCreateManyAndReturnArgs} args - Arguments to create many GlobalInventoryItems.
     * @example
     * // Create many GlobalInventoryItems
     * const globalInventoryItem = await prisma.globalInventoryItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GlobalInventoryItems and only return the `id`
     * const globalInventoryItemWithIdOnly = await prisma.globalInventoryItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GlobalInventoryItemCreateManyAndReturnArgs>(args?: SelectSubset<T, GlobalInventoryItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GlobalInventoryItem.
     * @param {GlobalInventoryItemDeleteArgs} args - Arguments to delete one GlobalInventoryItem.
     * @example
     * // Delete one GlobalInventoryItem
     * const GlobalInventoryItem = await prisma.globalInventoryItem.delete({
     *   where: {
     *     // ... filter to delete one GlobalInventoryItem
     *   }
     * })
     * 
     */
    delete<T extends GlobalInventoryItemDeleteArgs>(args: SelectSubset<T, GlobalInventoryItemDeleteArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GlobalInventoryItem.
     * @param {GlobalInventoryItemUpdateArgs} args - Arguments to update one GlobalInventoryItem.
     * @example
     * // Update one GlobalInventoryItem
     * const globalInventoryItem = await prisma.globalInventoryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlobalInventoryItemUpdateArgs>(args: SelectSubset<T, GlobalInventoryItemUpdateArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GlobalInventoryItems.
     * @param {GlobalInventoryItemDeleteManyArgs} args - Arguments to filter GlobalInventoryItems to delete.
     * @example
     * // Delete a few GlobalInventoryItems
     * const { count } = await prisma.globalInventoryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlobalInventoryItemDeleteManyArgs>(args?: SelectSubset<T, GlobalInventoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlobalInventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalInventoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlobalInventoryItems
     * const globalInventoryItem = await prisma.globalInventoryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlobalInventoryItemUpdateManyArgs>(args: SelectSubset<T, GlobalInventoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GlobalInventoryItem.
     * @param {GlobalInventoryItemUpsertArgs} args - Arguments to update or create a GlobalInventoryItem.
     * @example
     * // Update or create a GlobalInventoryItem
     * const globalInventoryItem = await prisma.globalInventoryItem.upsert({
     *   create: {
     *     // ... data to create a GlobalInventoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlobalInventoryItem we want to update
     *   }
     * })
     */
    upsert<T extends GlobalInventoryItemUpsertArgs>(args: SelectSubset<T, GlobalInventoryItemUpsertArgs<ExtArgs>>): Prisma__GlobalInventoryItemClient<$Result.GetResult<Prisma.$GlobalInventoryItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GlobalInventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalInventoryItemCountArgs} args - Arguments to filter GlobalInventoryItems to count.
     * @example
     * // Count the number of GlobalInventoryItems
     * const count = await prisma.globalInventoryItem.count({
     *   where: {
     *     // ... the filter for the GlobalInventoryItems we want to count
     *   }
     * })
    **/
    count<T extends GlobalInventoryItemCountArgs>(
      args?: Subset<T, GlobalInventoryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlobalInventoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlobalInventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalInventoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlobalInventoryItemAggregateArgs>(args: Subset<T, GlobalInventoryItemAggregateArgs>): Prisma.PrismaPromise<GetGlobalInventoryItemAggregateType<T>>

    /**
     * Group by GlobalInventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalInventoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlobalInventoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlobalInventoryItemGroupByArgs['orderBy'] }
        : { orderBy?: GlobalInventoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlobalInventoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlobalInventoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlobalInventoryItem model
   */
  readonly fields: GlobalInventoryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlobalInventoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlobalInventoryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CaseDop<T extends GlobalInventoryItem$CaseDopArgs<ExtArgs> = {}>(args?: Subset<T, GlobalInventoryItem$CaseDopArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseDropPayload<ExtArgs>, T, "findMany"> | Null>
    Item<T extends GlobalInventoryItem$ItemArgs<ExtArgs> = {}>(args?: Subset<T, GlobalInventoryItem$ItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlobalInventoryItem model
   */ 
  interface GlobalInventoryItemFieldRefs {
    readonly id: FieldRef<"GlobalInventoryItem", 'String'>
    readonly weaponName: FieldRef<"GlobalInventoryItem", 'String'>
    readonly skinName: FieldRef<"GlobalInventoryItem", 'String'>
    readonly skinQuality: FieldRef<"GlobalInventoryItem", 'String'>
    readonly skinPrice: FieldRef<"GlobalInventoryItem", 'Float'>
    readonly skinRarity: FieldRef<"GlobalInventoryItem", 'String'>
    readonly skinImgSource: FieldRef<"GlobalInventoryItem", 'String'>
    readonly stattrack: FieldRef<"GlobalInventoryItem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * GlobalInventoryItem findUnique
   */
  export type GlobalInventoryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which GlobalInventoryItem to fetch.
     */
    where: GlobalInventoryItemWhereUniqueInput
  }

  /**
   * GlobalInventoryItem findUniqueOrThrow
   */
  export type GlobalInventoryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which GlobalInventoryItem to fetch.
     */
    where: GlobalInventoryItemWhereUniqueInput
  }

  /**
   * GlobalInventoryItem findFirst
   */
  export type GlobalInventoryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which GlobalInventoryItem to fetch.
     */
    where?: GlobalInventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalInventoryItems to fetch.
     */
    orderBy?: GlobalInventoryItemOrderByWithRelationInput | GlobalInventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalInventoryItems.
     */
    cursor?: GlobalInventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalInventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalInventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalInventoryItems.
     */
    distinct?: GlobalInventoryItemScalarFieldEnum | GlobalInventoryItemScalarFieldEnum[]
  }

  /**
   * GlobalInventoryItem findFirstOrThrow
   */
  export type GlobalInventoryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which GlobalInventoryItem to fetch.
     */
    where?: GlobalInventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalInventoryItems to fetch.
     */
    orderBy?: GlobalInventoryItemOrderByWithRelationInput | GlobalInventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalInventoryItems.
     */
    cursor?: GlobalInventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalInventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalInventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalInventoryItems.
     */
    distinct?: GlobalInventoryItemScalarFieldEnum | GlobalInventoryItemScalarFieldEnum[]
  }

  /**
   * GlobalInventoryItem findMany
   */
  export type GlobalInventoryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which GlobalInventoryItems to fetch.
     */
    where?: GlobalInventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalInventoryItems to fetch.
     */
    orderBy?: GlobalInventoryItemOrderByWithRelationInput | GlobalInventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlobalInventoryItems.
     */
    cursor?: GlobalInventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalInventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalInventoryItems.
     */
    skip?: number
    distinct?: GlobalInventoryItemScalarFieldEnum | GlobalInventoryItemScalarFieldEnum[]
  }

  /**
   * GlobalInventoryItem create
   */
  export type GlobalInventoryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to create a GlobalInventoryItem.
     */
    data: XOR<GlobalInventoryItemCreateInput, GlobalInventoryItemUncheckedCreateInput>
  }

  /**
   * GlobalInventoryItem createMany
   */
  export type GlobalInventoryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlobalInventoryItems.
     */
    data: GlobalInventoryItemCreateManyInput | GlobalInventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GlobalInventoryItem createManyAndReturn
   */
  export type GlobalInventoryItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GlobalInventoryItems.
     */
    data: GlobalInventoryItemCreateManyInput | GlobalInventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GlobalInventoryItem update
   */
  export type GlobalInventoryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to update a GlobalInventoryItem.
     */
    data: XOR<GlobalInventoryItemUpdateInput, GlobalInventoryItemUncheckedUpdateInput>
    /**
     * Choose, which GlobalInventoryItem to update.
     */
    where: GlobalInventoryItemWhereUniqueInput
  }

  /**
   * GlobalInventoryItem updateMany
   */
  export type GlobalInventoryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlobalInventoryItems.
     */
    data: XOR<GlobalInventoryItemUpdateManyMutationInput, GlobalInventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which GlobalInventoryItems to update
     */
    where?: GlobalInventoryItemWhereInput
  }

  /**
   * GlobalInventoryItem upsert
   */
  export type GlobalInventoryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * The filter to search for the GlobalInventoryItem to update in case it exists.
     */
    where: GlobalInventoryItemWhereUniqueInput
    /**
     * In case the GlobalInventoryItem found by the `where` argument doesn't exist, create a new GlobalInventoryItem with this data.
     */
    create: XOR<GlobalInventoryItemCreateInput, GlobalInventoryItemUncheckedCreateInput>
    /**
     * In case the GlobalInventoryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlobalInventoryItemUpdateInput, GlobalInventoryItemUncheckedUpdateInput>
  }

  /**
   * GlobalInventoryItem delete
   */
  export type GlobalInventoryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
    /**
     * Filter which GlobalInventoryItem to delete.
     */
    where: GlobalInventoryItemWhereUniqueInput
  }

  /**
   * GlobalInventoryItem deleteMany
   */
  export type GlobalInventoryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalInventoryItems to delete
     */
    where?: GlobalInventoryItemWhereInput
  }

  /**
   * GlobalInventoryItem.CaseDop
   */
  export type GlobalInventoryItem$CaseDopArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseDrop
     */
    select?: CaseDropSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseDropInclude<ExtArgs> | null
    where?: CaseDropWhereInput
    orderBy?: CaseDropOrderByWithRelationInput | CaseDropOrderByWithRelationInput[]
    cursor?: CaseDropWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseDropScalarFieldEnum | CaseDropScalarFieldEnum[]
  }

  /**
   * GlobalInventoryItem.Item
   */
  export type GlobalInventoryItem$ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * GlobalInventoryItem without action
   */
  export type GlobalInventoryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalInventoryItem
     */
    select?: GlobalInventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalInventoryItemInclude<ExtArgs> | null
  }


  /**
   * Model CaseBattle
   */

  export type AggregateCaseBattle = {
    _count: CaseBattleCountAggregateOutputType | null
    _avg: CaseBattleAvgAggregateOutputType | null
    _sum: CaseBattleSumAggregateOutputType | null
    _min: CaseBattleMinAggregateOutputType | null
    _max: CaseBattleMaxAggregateOutputType | null
  }

  export type CaseBattleAvgAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    totalCases: number | null
    playerCount: number | null
    winner: number | null
  }

  export type CaseBattleSumAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    totalCases: number | null
    playerCount: number | null
    winner: number | null
  }

  export type CaseBattleMinAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    totalCases: number | null
    owner: string | null
    finished: boolean | null
    playerCount: number | null
    public: boolean | null
    joinKey: string | null
    mode: string | null
    winner: number | null
    createdAt: Date | null
  }

  export type CaseBattleMaxAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    totalCases: number | null
    owner: string | null
    finished: boolean | null
    playerCount: number | null
    public: boolean | null
    joinKey: string | null
    mode: string | null
    winner: number | null
    createdAt: Date | null
  }

  export type CaseBattleCountAggregateOutputType = {
    id: number
    totalPrice: number
    totalCases: number
    owner: number
    finished: number
    players: number
    playerCount: number
    caseData: number
    drops: number
    wonItems: number
    public: number
    joinKey: number
    mode: number
    winner: number
    createdAt: number
    _all: number
  }


  export type CaseBattleAvgAggregateInputType = {
    id?: true
    totalPrice?: true
    totalCases?: true
    playerCount?: true
    winner?: true
  }

  export type CaseBattleSumAggregateInputType = {
    id?: true
    totalPrice?: true
    totalCases?: true
    playerCount?: true
    winner?: true
  }

  export type CaseBattleMinAggregateInputType = {
    id?: true
    totalPrice?: true
    totalCases?: true
    owner?: true
    finished?: true
    playerCount?: true
    public?: true
    joinKey?: true
    mode?: true
    winner?: true
    createdAt?: true
  }

  export type CaseBattleMaxAggregateInputType = {
    id?: true
    totalPrice?: true
    totalCases?: true
    owner?: true
    finished?: true
    playerCount?: true
    public?: true
    joinKey?: true
    mode?: true
    winner?: true
    createdAt?: true
  }

  export type CaseBattleCountAggregateInputType = {
    id?: true
    totalPrice?: true
    totalCases?: true
    owner?: true
    finished?: true
    players?: true
    playerCount?: true
    caseData?: true
    drops?: true
    wonItems?: true
    public?: true
    joinKey?: true
    mode?: true
    winner?: true
    createdAt?: true
    _all?: true
  }

  export type CaseBattleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseBattle to aggregate.
     */
    where?: CaseBattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBattles to fetch.
     */
    orderBy?: CaseBattleOrderByWithRelationInput | CaseBattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseBattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBattles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBattles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseBattles
    **/
    _count?: true | CaseBattleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseBattleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseBattleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseBattleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseBattleMaxAggregateInputType
  }

  export type GetCaseBattleAggregateType<T extends CaseBattleAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseBattle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseBattle[P]>
      : GetScalarType<T[P], AggregateCaseBattle[P]>
  }




  export type CaseBattleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseBattleWhereInput
    orderBy?: CaseBattleOrderByWithAggregationInput | CaseBattleOrderByWithAggregationInput[]
    by: CaseBattleScalarFieldEnum[] | CaseBattleScalarFieldEnum
    having?: CaseBattleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseBattleCountAggregateInputType | true
    _avg?: CaseBattleAvgAggregateInputType
    _sum?: CaseBattleSumAggregateInputType
    _min?: CaseBattleMinAggregateInputType
    _max?: CaseBattleMaxAggregateInputType
  }

  export type CaseBattleGroupByOutputType = {
    id: number
    totalPrice: number
    totalCases: number
    owner: string
    finished: boolean
    players: JsonValue
    playerCount: number
    caseData: JsonValue[]
    drops: JsonValue
    wonItems: JsonValue
    public: boolean
    joinKey: string | null
    mode: string
    winner: number | null
    createdAt: Date
    _count: CaseBattleCountAggregateOutputType | null
    _avg: CaseBattleAvgAggregateOutputType | null
    _sum: CaseBattleSumAggregateOutputType | null
    _min: CaseBattleMinAggregateOutputType | null
    _max: CaseBattleMaxAggregateOutputType | null
  }

  type GetCaseBattleGroupByPayload<T extends CaseBattleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseBattleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseBattleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseBattleGroupByOutputType[P]>
            : GetScalarType<T[P], CaseBattleGroupByOutputType[P]>
        }
      >
    >


  export type CaseBattleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalPrice?: boolean
    totalCases?: boolean
    owner?: boolean
    finished?: boolean
    players?: boolean
    playerCount?: boolean
    caseData?: boolean
    drops?: boolean
    wonItems?: boolean
    public?: boolean
    joinKey?: boolean
    mode?: boolean
    winner?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["caseBattle"]>

  export type CaseBattleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalPrice?: boolean
    totalCases?: boolean
    owner?: boolean
    finished?: boolean
    players?: boolean
    playerCount?: boolean
    caseData?: boolean
    drops?: boolean
    wonItems?: boolean
    public?: boolean
    joinKey?: boolean
    mode?: boolean
    winner?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["caseBattle"]>

  export type CaseBattleSelectScalar = {
    id?: boolean
    totalPrice?: boolean
    totalCases?: boolean
    owner?: boolean
    finished?: boolean
    players?: boolean
    playerCount?: boolean
    caseData?: boolean
    drops?: boolean
    wonItems?: boolean
    public?: boolean
    joinKey?: boolean
    mode?: boolean
    winner?: boolean
    createdAt?: boolean
  }


  export type $CaseBattlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseBattle"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      totalPrice: number
      totalCases: number
      owner: string
      finished: boolean
      players: Prisma.JsonValue
      playerCount: number
      caseData: Prisma.JsonValue[]
      drops: Prisma.JsonValue
      wonItems: Prisma.JsonValue
      public: boolean
      joinKey: string | null
      mode: string
      winner: number | null
      createdAt: Date
    }, ExtArgs["result"]["caseBattle"]>
    composites: {}
  }

  type CaseBattleGetPayload<S extends boolean | null | undefined | CaseBattleDefaultArgs> = $Result.GetResult<Prisma.$CaseBattlePayload, S>

  type CaseBattleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaseBattleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaseBattleCountAggregateInputType | true
    }

  export interface CaseBattleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseBattle'], meta: { name: 'CaseBattle' } }
    /**
     * Find zero or one CaseBattle that matches the filter.
     * @param {CaseBattleFindUniqueArgs} args - Arguments to find a CaseBattle
     * @example
     * // Get one CaseBattle
     * const caseBattle = await prisma.caseBattle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseBattleFindUniqueArgs>(args: SelectSubset<T, CaseBattleFindUniqueArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaseBattle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaseBattleFindUniqueOrThrowArgs} args - Arguments to find a CaseBattle
     * @example
     * // Get one CaseBattle
     * const caseBattle = await prisma.caseBattle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseBattleFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseBattleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaseBattle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBattleFindFirstArgs} args - Arguments to find a CaseBattle
     * @example
     * // Get one CaseBattle
     * const caseBattle = await prisma.caseBattle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseBattleFindFirstArgs>(args?: SelectSubset<T, CaseBattleFindFirstArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaseBattle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBattleFindFirstOrThrowArgs} args - Arguments to find a CaseBattle
     * @example
     * // Get one CaseBattle
     * const caseBattle = await prisma.caseBattle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseBattleFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseBattleFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaseBattles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBattleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseBattles
     * const caseBattles = await prisma.caseBattle.findMany()
     * 
     * // Get first 10 CaseBattles
     * const caseBattles = await prisma.caseBattle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseBattleWithIdOnly = await prisma.caseBattle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseBattleFindManyArgs>(args?: SelectSubset<T, CaseBattleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaseBattle.
     * @param {CaseBattleCreateArgs} args - Arguments to create a CaseBattle.
     * @example
     * // Create one CaseBattle
     * const CaseBattle = await prisma.caseBattle.create({
     *   data: {
     *     // ... data to create a CaseBattle
     *   }
     * })
     * 
     */
    create<T extends CaseBattleCreateArgs>(args: SelectSubset<T, CaseBattleCreateArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaseBattles.
     * @param {CaseBattleCreateManyArgs} args - Arguments to create many CaseBattles.
     * @example
     * // Create many CaseBattles
     * const caseBattle = await prisma.caseBattle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseBattleCreateManyArgs>(args?: SelectSubset<T, CaseBattleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseBattles and returns the data saved in the database.
     * @param {CaseBattleCreateManyAndReturnArgs} args - Arguments to create many CaseBattles.
     * @example
     * // Create many CaseBattles
     * const caseBattle = await prisma.caseBattle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseBattles and only return the `id`
     * const caseBattleWithIdOnly = await prisma.caseBattle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseBattleCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseBattleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CaseBattle.
     * @param {CaseBattleDeleteArgs} args - Arguments to delete one CaseBattle.
     * @example
     * // Delete one CaseBattle
     * const CaseBattle = await prisma.caseBattle.delete({
     *   where: {
     *     // ... filter to delete one CaseBattle
     *   }
     * })
     * 
     */
    delete<T extends CaseBattleDeleteArgs>(args: SelectSubset<T, CaseBattleDeleteArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaseBattle.
     * @param {CaseBattleUpdateArgs} args - Arguments to update one CaseBattle.
     * @example
     * // Update one CaseBattle
     * const caseBattle = await prisma.caseBattle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseBattleUpdateArgs>(args: SelectSubset<T, CaseBattleUpdateArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaseBattles.
     * @param {CaseBattleDeleteManyArgs} args - Arguments to filter CaseBattles to delete.
     * @example
     * // Delete a few CaseBattles
     * const { count } = await prisma.caseBattle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseBattleDeleteManyArgs>(args?: SelectSubset<T, CaseBattleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseBattles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBattleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseBattles
     * const caseBattle = await prisma.caseBattle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseBattleUpdateManyArgs>(args: SelectSubset<T, CaseBattleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaseBattle.
     * @param {CaseBattleUpsertArgs} args - Arguments to update or create a CaseBattle.
     * @example
     * // Update or create a CaseBattle
     * const caseBattle = await prisma.caseBattle.upsert({
     *   create: {
     *     // ... data to create a CaseBattle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseBattle we want to update
     *   }
     * })
     */
    upsert<T extends CaseBattleUpsertArgs>(args: SelectSubset<T, CaseBattleUpsertArgs<ExtArgs>>): Prisma__CaseBattleClient<$Result.GetResult<Prisma.$CaseBattlePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaseBattles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBattleCountArgs} args - Arguments to filter CaseBattles to count.
     * @example
     * // Count the number of CaseBattles
     * const count = await prisma.caseBattle.count({
     *   where: {
     *     // ... the filter for the CaseBattles we want to count
     *   }
     * })
    **/
    count<T extends CaseBattleCountArgs>(
      args?: Subset<T, CaseBattleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseBattleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseBattle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBattleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseBattleAggregateArgs>(args: Subset<T, CaseBattleAggregateArgs>): Prisma.PrismaPromise<GetCaseBattleAggregateType<T>>

    /**
     * Group by CaseBattle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseBattleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseBattleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseBattleGroupByArgs['orderBy'] }
        : { orderBy?: CaseBattleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseBattleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseBattleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseBattle model
   */
  readonly fields: CaseBattleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseBattle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseBattleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseBattle model
   */ 
  interface CaseBattleFieldRefs {
    readonly id: FieldRef<"CaseBattle", 'Int'>
    readonly totalPrice: FieldRef<"CaseBattle", 'Float'>
    readonly totalCases: FieldRef<"CaseBattle", 'Int'>
    readonly owner: FieldRef<"CaseBattle", 'String'>
    readonly finished: FieldRef<"CaseBattle", 'Boolean'>
    readonly players: FieldRef<"CaseBattle", 'Json'>
    readonly playerCount: FieldRef<"CaseBattle", 'Int'>
    readonly caseData: FieldRef<"CaseBattle", 'Json[]'>
    readonly drops: FieldRef<"CaseBattle", 'Json'>
    readonly wonItems: FieldRef<"CaseBattle", 'Json'>
    readonly public: FieldRef<"CaseBattle", 'Boolean'>
    readonly joinKey: FieldRef<"CaseBattle", 'String'>
    readonly mode: FieldRef<"CaseBattle", 'String'>
    readonly winner: FieldRef<"CaseBattle", 'Int'>
    readonly createdAt: FieldRef<"CaseBattle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseBattle findUnique
   */
  export type CaseBattleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * Filter, which CaseBattle to fetch.
     */
    where: CaseBattleWhereUniqueInput
  }

  /**
   * CaseBattle findUniqueOrThrow
   */
  export type CaseBattleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * Filter, which CaseBattle to fetch.
     */
    where: CaseBattleWhereUniqueInput
  }

  /**
   * CaseBattle findFirst
   */
  export type CaseBattleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * Filter, which CaseBattle to fetch.
     */
    where?: CaseBattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBattles to fetch.
     */
    orderBy?: CaseBattleOrderByWithRelationInput | CaseBattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseBattles.
     */
    cursor?: CaseBattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBattles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBattles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseBattles.
     */
    distinct?: CaseBattleScalarFieldEnum | CaseBattleScalarFieldEnum[]
  }

  /**
   * CaseBattle findFirstOrThrow
   */
  export type CaseBattleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * Filter, which CaseBattle to fetch.
     */
    where?: CaseBattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBattles to fetch.
     */
    orderBy?: CaseBattleOrderByWithRelationInput | CaseBattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseBattles.
     */
    cursor?: CaseBattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBattles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBattles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseBattles.
     */
    distinct?: CaseBattleScalarFieldEnum | CaseBattleScalarFieldEnum[]
  }

  /**
   * CaseBattle findMany
   */
  export type CaseBattleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * Filter, which CaseBattles to fetch.
     */
    where?: CaseBattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseBattles to fetch.
     */
    orderBy?: CaseBattleOrderByWithRelationInput | CaseBattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseBattles.
     */
    cursor?: CaseBattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseBattles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseBattles.
     */
    skip?: number
    distinct?: CaseBattleScalarFieldEnum | CaseBattleScalarFieldEnum[]
  }

  /**
   * CaseBattle create
   */
  export type CaseBattleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * The data needed to create a CaseBattle.
     */
    data: XOR<CaseBattleCreateInput, CaseBattleUncheckedCreateInput>
  }

  /**
   * CaseBattle createMany
   */
  export type CaseBattleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseBattles.
     */
    data: CaseBattleCreateManyInput | CaseBattleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseBattle createManyAndReturn
   */
  export type CaseBattleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CaseBattles.
     */
    data: CaseBattleCreateManyInput | CaseBattleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseBattle update
   */
  export type CaseBattleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * The data needed to update a CaseBattle.
     */
    data: XOR<CaseBattleUpdateInput, CaseBattleUncheckedUpdateInput>
    /**
     * Choose, which CaseBattle to update.
     */
    where: CaseBattleWhereUniqueInput
  }

  /**
   * CaseBattle updateMany
   */
  export type CaseBattleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseBattles.
     */
    data: XOR<CaseBattleUpdateManyMutationInput, CaseBattleUncheckedUpdateManyInput>
    /**
     * Filter which CaseBattles to update
     */
    where?: CaseBattleWhereInput
  }

  /**
   * CaseBattle upsert
   */
  export type CaseBattleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * The filter to search for the CaseBattle to update in case it exists.
     */
    where: CaseBattleWhereUniqueInput
    /**
     * In case the CaseBattle found by the `where` argument doesn't exist, create a new CaseBattle with this data.
     */
    create: XOR<CaseBattleCreateInput, CaseBattleUncheckedCreateInput>
    /**
     * In case the CaseBattle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseBattleUpdateInput, CaseBattleUncheckedUpdateInput>
  }

  /**
   * CaseBattle delete
   */
  export type CaseBattleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
    /**
     * Filter which CaseBattle to delete.
     */
    where: CaseBattleWhereUniqueInput
  }

  /**
   * CaseBattle deleteMany
   */
  export type CaseBattleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseBattles to delete
     */
    where?: CaseBattleWhereInput
  }

  /**
   * CaseBattle without action
   */
  export type CaseBattleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseBattle
     */
    select?: CaseBattleSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    passwordHash: 'passwordHash',
    balance: 'balance',
    goldBalance: 'goldBalance',
    sandboxMode: 'sandboxMode',
    pfpUrl: 'pfpUrl',
    language: 'language'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    dropId: 'dropId',
    ownerId: 'ownerId',
    origin: 'origin',
    globalInvID: 'globalInvID',
    dropDate: 'dropDate',
    sold: 'sold',
    upgraded: 'upgraded'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const CaseScalarFieldEnum: {
    urlName: 'urlName',
    websiteName: 'websiteName',
    price: 'price',
    expired: 'expired',
    category: 'category',
    goldenCase: 'goldenCase',
    imgName: 'imgName',
    positionInGrid: 'positionInGrid'
  };

  export type CaseScalarFieldEnum = (typeof CaseScalarFieldEnum)[keyof typeof CaseScalarFieldEnum]


  export const CaseSectionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    rowSpan: 'rowSpan',
    colSpan: 'colSpan',
    ratio: 'ratio',
    position: 'position'
  };

  export type CaseSectionScalarFieldEnum = (typeof CaseSectionScalarFieldEnum)[keyof typeof CaseSectionScalarFieldEnum]


  export const CaseDropScalarFieldEnum: {
    id: 'id',
    globalInvID: 'globalInvID',
    weaponName: 'weaponName',
    skinName: 'skinName',
    skinQuality: 'skinQuality',
    skinPrice: 'skinPrice',
    skinRarity: 'skinRarity',
    skinImgSource: 'skinImgSource',
    stattrack: 'stattrack',
    parentCase: 'parentCase',
    displayOdds: 'displayOdds',
    oddsRange: 'oddsRange',
    priceRange: 'priceRange',
    displayChance: 'displayChance'
  };

  export type CaseDropScalarFieldEnum = (typeof CaseDropScalarFieldEnum)[keyof typeof CaseDropScalarFieldEnum]


  export const GlobalInventoryItemScalarFieldEnum: {
    id: 'id',
    weaponName: 'weaponName',
    skinName: 'skinName',
    skinQuality: 'skinQuality',
    skinPrice: 'skinPrice',
    skinRarity: 'skinRarity',
    skinImgSource: 'skinImgSource',
    stattrack: 'stattrack'
  };

  export type GlobalInventoryItemScalarFieldEnum = (typeof GlobalInventoryItemScalarFieldEnum)[keyof typeof GlobalInventoryItemScalarFieldEnum]


  export const CaseBattleScalarFieldEnum: {
    id: 'id',
    totalPrice: 'totalPrice',
    totalCases: 'totalCases',
    owner: 'owner',
    finished: 'finished',
    players: 'players',
    playerCount: 'playerCount',
    caseData: 'caseData',
    drops: 'drops',
    wonItems: 'wonItems',
    public: 'public',
    joinKey: 'joinKey',
    mode: 'mode',
    winner: 'winner',
    createdAt: 'createdAt'
  };

  export type CaseBattleScalarFieldEnum = (typeof CaseBattleScalarFieldEnum)[keyof typeof CaseBattleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    balance?: FloatFilter<"User"> | number
    goldBalance?: IntFilter<"User"> | number
    sandboxMode?: BoolFilter<"User"> | boolean
    pfpUrl?: StringFilter<"User"> | string
    language?: StringFilter<"User"> | string
    inventory?: ItemListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    balance?: SortOrder
    goldBalance?: SortOrder
    sandboxMode?: SortOrder
    pfpUrl?: SortOrder
    language?: SortOrder
    inventory?: ItemOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    balance?: FloatFilter<"User"> | number
    goldBalance?: IntFilter<"User"> | number
    sandboxMode?: BoolFilter<"User"> | boolean
    pfpUrl?: StringFilter<"User"> | string
    language?: StringFilter<"User"> | string
    inventory?: ItemListRelationFilter
  }, "id" | "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    balance?: SortOrder
    goldBalance?: SortOrder
    sandboxMode?: SortOrder
    pfpUrl?: SortOrder
    language?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    balance?: FloatWithAggregatesFilter<"User"> | number
    goldBalance?: IntWithAggregatesFilter<"User"> | number
    sandboxMode?: BoolWithAggregatesFilter<"User"> | boolean
    pfpUrl?: StringWithAggregatesFilter<"User"> | string
    language?: StringWithAggregatesFilter<"User"> | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    dropId?: StringFilter<"Item"> | string
    ownerId?: StringFilter<"Item"> | string
    origin?: StringFilter<"Item"> | string
    globalInvID?: StringFilter<"Item"> | string
    dropDate?: DateTimeFilter<"Item"> | Date | string
    sold?: BoolFilter<"Item"> | boolean
    upgraded?: BoolFilter<"Item"> | boolean
    globalInvItem?: XOR<GlobalInventoryItemRelationFilter, GlobalInventoryItemWhereInput>
    owner?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ItemOrderByWithRelationInput = {
    dropId?: SortOrder
    ownerId?: SortOrder
    origin?: SortOrder
    globalInvID?: SortOrder
    dropDate?: SortOrder
    sold?: SortOrder
    upgraded?: SortOrder
    globalInvItem?: GlobalInventoryItemOrderByWithRelationInput
    owner?: UserOrderByWithRelationInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    dropId?: string
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    ownerId?: StringFilter<"Item"> | string
    origin?: StringFilter<"Item"> | string
    globalInvID?: StringFilter<"Item"> | string
    dropDate?: DateTimeFilter<"Item"> | Date | string
    sold?: BoolFilter<"Item"> | boolean
    upgraded?: BoolFilter<"Item"> | boolean
    globalInvItem?: XOR<GlobalInventoryItemRelationFilter, GlobalInventoryItemWhereInput>
    owner?: XOR<UserRelationFilter, UserWhereInput>
  }, "dropId" | "dropId">

  export type ItemOrderByWithAggregationInput = {
    dropId?: SortOrder
    ownerId?: SortOrder
    origin?: SortOrder
    globalInvID?: SortOrder
    dropDate?: SortOrder
    sold?: SortOrder
    upgraded?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    dropId?: StringWithAggregatesFilter<"Item"> | string
    ownerId?: StringWithAggregatesFilter<"Item"> | string
    origin?: StringWithAggregatesFilter<"Item"> | string
    globalInvID?: StringWithAggregatesFilter<"Item"> | string
    dropDate?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    sold?: BoolWithAggregatesFilter<"Item"> | boolean
    upgraded?: BoolWithAggregatesFilter<"Item"> | boolean
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
  }, "id" | "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
  }

  export type CaseWhereInput = {
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    urlName?: StringFilter<"Case"> | string
    websiteName?: StringFilter<"Case"> | string
    price?: FloatFilter<"Case"> | number
    expired?: BoolFilter<"Case"> | boolean
    category?: StringNullableFilter<"Case"> | string | null
    goldenCase?: BoolNullableFilter<"Case"> | boolean | null
    imgName?: StringFilter<"Case"> | string
    positionInGrid?: IntNullableFilter<"Case"> | number | null
    section?: XOR<CaseSectionNullableRelationFilter, CaseSectionWhereInput> | null
    drops?: CaseDropListRelationFilter
  }

  export type CaseOrderByWithRelationInput = {
    urlName?: SortOrder
    websiteName?: SortOrder
    price?: SortOrder
    expired?: SortOrder
    category?: SortOrderInput | SortOrder
    goldenCase?: SortOrderInput | SortOrder
    imgName?: SortOrder
    positionInGrid?: SortOrderInput | SortOrder
    section?: CaseSectionOrderByWithRelationInput
    drops?: CaseDropOrderByRelationAggregateInput
  }

  export type CaseWhereUniqueInput = Prisma.AtLeast<{
    urlName?: string
    websiteName?: string
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    price?: FloatFilter<"Case"> | number
    expired?: BoolFilter<"Case"> | boolean
    category?: StringNullableFilter<"Case"> | string | null
    goldenCase?: BoolNullableFilter<"Case"> | boolean | null
    imgName?: StringFilter<"Case"> | string
    positionInGrid?: IntNullableFilter<"Case"> | number | null
    section?: XOR<CaseSectionNullableRelationFilter, CaseSectionWhereInput> | null
    drops?: CaseDropListRelationFilter
  }, "urlName" | "urlName" | "websiteName">

  export type CaseOrderByWithAggregationInput = {
    urlName?: SortOrder
    websiteName?: SortOrder
    price?: SortOrder
    expired?: SortOrder
    category?: SortOrderInput | SortOrder
    goldenCase?: SortOrderInput | SortOrder
    imgName?: SortOrder
    positionInGrid?: SortOrderInput | SortOrder
    _count?: CaseCountOrderByAggregateInput
    _avg?: CaseAvgOrderByAggregateInput
    _max?: CaseMaxOrderByAggregateInput
    _min?: CaseMinOrderByAggregateInput
    _sum?: CaseSumOrderByAggregateInput
  }

  export type CaseScalarWhereWithAggregatesInput = {
    AND?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    OR?: CaseScalarWhereWithAggregatesInput[]
    NOT?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    urlName?: StringWithAggregatesFilter<"Case"> | string
    websiteName?: StringWithAggregatesFilter<"Case"> | string
    price?: FloatWithAggregatesFilter<"Case"> | number
    expired?: BoolWithAggregatesFilter<"Case"> | boolean
    category?: StringNullableWithAggregatesFilter<"Case"> | string | null
    goldenCase?: BoolNullableWithAggregatesFilter<"Case"> | boolean | null
    imgName?: StringWithAggregatesFilter<"Case"> | string
    positionInGrid?: IntNullableWithAggregatesFilter<"Case"> | number | null
  }

  export type CaseSectionWhereInput = {
    AND?: CaseSectionWhereInput | CaseSectionWhereInput[]
    OR?: CaseSectionWhereInput[]
    NOT?: CaseSectionWhereInput | CaseSectionWhereInput[]
    id?: StringFilter<"CaseSection"> | string
    name?: StringFilter<"CaseSection"> | string
    rowSpan?: IntFilter<"CaseSection"> | number
    colSpan?: IntFilter<"CaseSection"> | number
    ratio?: StringFilter<"CaseSection"> | string
    position?: IntFilter<"CaseSection"> | number
    cases?: CaseListRelationFilter
  }

  export type CaseSectionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    rowSpan?: SortOrder
    colSpan?: SortOrder
    ratio?: SortOrder
    position?: SortOrder
    cases?: CaseOrderByRelationAggregateInput
  }

  export type CaseSectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CaseSectionWhereInput | CaseSectionWhereInput[]
    OR?: CaseSectionWhereInput[]
    NOT?: CaseSectionWhereInput | CaseSectionWhereInput[]
    rowSpan?: IntFilter<"CaseSection"> | number
    colSpan?: IntFilter<"CaseSection"> | number
    ratio?: StringFilter<"CaseSection"> | string
    position?: IntFilter<"CaseSection"> | number
    cases?: CaseListRelationFilter
  }, "id" | "id" | "name">

  export type CaseSectionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    rowSpan?: SortOrder
    colSpan?: SortOrder
    ratio?: SortOrder
    position?: SortOrder
    _count?: CaseSectionCountOrderByAggregateInput
    _avg?: CaseSectionAvgOrderByAggregateInput
    _max?: CaseSectionMaxOrderByAggregateInput
    _min?: CaseSectionMinOrderByAggregateInput
    _sum?: CaseSectionSumOrderByAggregateInput
  }

  export type CaseSectionScalarWhereWithAggregatesInput = {
    AND?: CaseSectionScalarWhereWithAggregatesInput | CaseSectionScalarWhereWithAggregatesInput[]
    OR?: CaseSectionScalarWhereWithAggregatesInput[]
    NOT?: CaseSectionScalarWhereWithAggregatesInput | CaseSectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseSection"> | string
    name?: StringWithAggregatesFilter<"CaseSection"> | string
    rowSpan?: IntWithAggregatesFilter<"CaseSection"> | number
    colSpan?: IntWithAggregatesFilter<"CaseSection"> | number
    ratio?: StringWithAggregatesFilter<"CaseSection"> | string
    position?: IntWithAggregatesFilter<"CaseSection"> | number
  }

  export type CaseDropWhereInput = {
    AND?: CaseDropWhereInput | CaseDropWhereInput[]
    OR?: CaseDropWhereInput[]
    NOT?: CaseDropWhereInput | CaseDropWhereInput[]
    id?: StringFilter<"CaseDrop"> | string
    globalInvID?: StringFilter<"CaseDrop"> | string
    weaponName?: StringFilter<"CaseDrop"> | string
    skinName?: StringFilter<"CaseDrop"> | string
    skinQuality?: StringFilter<"CaseDrop"> | string
    skinPrice?: FloatFilter<"CaseDrop"> | number
    skinRarity?: StringFilter<"CaseDrop"> | string
    skinImgSource?: StringFilter<"CaseDrop"> | string
    stattrack?: BoolFilter<"CaseDrop"> | boolean
    parentCase?: StringFilter<"CaseDrop"> | string
    displayOdds?: StringFilter<"CaseDrop"> | string
    oddsRange?: IntNullableListFilter<"CaseDrop">
    priceRange?: StringFilter<"CaseDrop"> | string
    displayChance?: StringFilter<"CaseDrop"> | string
    globalInvItem?: XOR<GlobalInventoryItemRelationFilter, GlobalInventoryItemWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
  }

  export type CaseDropOrderByWithRelationInput = {
    id?: SortOrder
    globalInvID?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
    parentCase?: SortOrder
    displayOdds?: SortOrder
    oddsRange?: SortOrder
    priceRange?: SortOrder
    displayChance?: SortOrder
    globalInvItem?: GlobalInventoryItemOrderByWithRelationInput
    case?: CaseOrderByWithRelationInput
  }

  export type CaseDropWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    parentCase_weaponName_skinName_skinQuality?: CaseDropParentCaseWeaponNameSkinNameSkinQualityCompoundUniqueInput
    AND?: CaseDropWhereInput | CaseDropWhereInput[]
    OR?: CaseDropWhereInput[]
    NOT?: CaseDropWhereInput | CaseDropWhereInput[]
    globalInvID?: StringFilter<"CaseDrop"> | string
    weaponName?: StringFilter<"CaseDrop"> | string
    skinName?: StringFilter<"CaseDrop"> | string
    skinQuality?: StringFilter<"CaseDrop"> | string
    skinPrice?: FloatFilter<"CaseDrop"> | number
    skinRarity?: StringFilter<"CaseDrop"> | string
    skinImgSource?: StringFilter<"CaseDrop"> | string
    stattrack?: BoolFilter<"CaseDrop"> | boolean
    parentCase?: StringFilter<"CaseDrop"> | string
    displayOdds?: StringFilter<"CaseDrop"> | string
    oddsRange?: IntNullableListFilter<"CaseDrop">
    priceRange?: StringFilter<"CaseDrop"> | string
    displayChance?: StringFilter<"CaseDrop"> | string
    globalInvItem?: XOR<GlobalInventoryItemRelationFilter, GlobalInventoryItemWhereInput>
    case?: XOR<CaseRelationFilter, CaseWhereInput>
  }, "id" | "id" | "parentCase_weaponName_skinName_skinQuality">

  export type CaseDropOrderByWithAggregationInput = {
    id?: SortOrder
    globalInvID?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
    parentCase?: SortOrder
    displayOdds?: SortOrder
    oddsRange?: SortOrder
    priceRange?: SortOrder
    displayChance?: SortOrder
    _count?: CaseDropCountOrderByAggregateInput
    _avg?: CaseDropAvgOrderByAggregateInput
    _max?: CaseDropMaxOrderByAggregateInput
    _min?: CaseDropMinOrderByAggregateInput
    _sum?: CaseDropSumOrderByAggregateInput
  }

  export type CaseDropScalarWhereWithAggregatesInput = {
    AND?: CaseDropScalarWhereWithAggregatesInput | CaseDropScalarWhereWithAggregatesInput[]
    OR?: CaseDropScalarWhereWithAggregatesInput[]
    NOT?: CaseDropScalarWhereWithAggregatesInput | CaseDropScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseDrop"> | string
    globalInvID?: StringWithAggregatesFilter<"CaseDrop"> | string
    weaponName?: StringWithAggregatesFilter<"CaseDrop"> | string
    skinName?: StringWithAggregatesFilter<"CaseDrop"> | string
    skinQuality?: StringWithAggregatesFilter<"CaseDrop"> | string
    skinPrice?: FloatWithAggregatesFilter<"CaseDrop"> | number
    skinRarity?: StringWithAggregatesFilter<"CaseDrop"> | string
    skinImgSource?: StringWithAggregatesFilter<"CaseDrop"> | string
    stattrack?: BoolWithAggregatesFilter<"CaseDrop"> | boolean
    parentCase?: StringWithAggregatesFilter<"CaseDrop"> | string
    displayOdds?: StringWithAggregatesFilter<"CaseDrop"> | string
    oddsRange?: IntNullableListFilter<"CaseDrop">
    priceRange?: StringWithAggregatesFilter<"CaseDrop"> | string
    displayChance?: StringWithAggregatesFilter<"CaseDrop"> | string
  }

  export type GlobalInventoryItemWhereInput = {
    AND?: GlobalInventoryItemWhereInput | GlobalInventoryItemWhereInput[]
    OR?: GlobalInventoryItemWhereInput[]
    NOT?: GlobalInventoryItemWhereInput | GlobalInventoryItemWhereInput[]
    id?: StringFilter<"GlobalInventoryItem"> | string
    weaponName?: StringFilter<"GlobalInventoryItem"> | string
    skinName?: StringFilter<"GlobalInventoryItem"> | string
    skinQuality?: StringFilter<"GlobalInventoryItem"> | string
    skinPrice?: FloatFilter<"GlobalInventoryItem"> | number
    skinRarity?: StringFilter<"GlobalInventoryItem"> | string
    skinImgSource?: StringFilter<"GlobalInventoryItem"> | string
    stattrack?: BoolFilter<"GlobalInventoryItem"> | boolean
    CaseDop?: CaseDropListRelationFilter
    Item?: ItemListRelationFilter
  }

  export type GlobalInventoryItemOrderByWithRelationInput = {
    id?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
    CaseDop?: CaseDropOrderByRelationAggregateInput
    Item?: ItemOrderByRelationAggregateInput
  }

  export type GlobalInventoryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    weaponName_skinName_skinQuality_stattrack?: GlobalInventoryItemWeaponNameSkinNameSkinQualityStattrackCompoundUniqueInput
    id_weaponName_skinName_skinQuality_skinPrice_skinRarity_skinImgSource_stattrack?: GlobalInventoryItemIdWeaponNameSkinNameSkinQualitySkinPriceSkinRaritySkinImgSourceStattrackCompoundUniqueInput
    AND?: GlobalInventoryItemWhereInput | GlobalInventoryItemWhereInput[]
    OR?: GlobalInventoryItemWhereInput[]
    NOT?: GlobalInventoryItemWhereInput | GlobalInventoryItemWhereInput[]
    weaponName?: StringFilter<"GlobalInventoryItem"> | string
    skinName?: StringFilter<"GlobalInventoryItem"> | string
    skinQuality?: StringFilter<"GlobalInventoryItem"> | string
    skinPrice?: FloatFilter<"GlobalInventoryItem"> | number
    skinRarity?: StringFilter<"GlobalInventoryItem"> | string
    skinImgSource?: StringFilter<"GlobalInventoryItem"> | string
    stattrack?: BoolFilter<"GlobalInventoryItem"> | boolean
    CaseDop?: CaseDropListRelationFilter
    Item?: ItemListRelationFilter
  }, "id" | "id" | "weaponName_skinName_skinQuality_stattrack" | "id_weaponName_skinName_skinQuality_skinPrice_skinRarity_skinImgSource_stattrack">

  export type GlobalInventoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
    _count?: GlobalInventoryItemCountOrderByAggregateInput
    _avg?: GlobalInventoryItemAvgOrderByAggregateInput
    _max?: GlobalInventoryItemMaxOrderByAggregateInput
    _min?: GlobalInventoryItemMinOrderByAggregateInput
    _sum?: GlobalInventoryItemSumOrderByAggregateInput
  }

  export type GlobalInventoryItemScalarWhereWithAggregatesInput = {
    AND?: GlobalInventoryItemScalarWhereWithAggregatesInput | GlobalInventoryItemScalarWhereWithAggregatesInput[]
    OR?: GlobalInventoryItemScalarWhereWithAggregatesInput[]
    NOT?: GlobalInventoryItemScalarWhereWithAggregatesInput | GlobalInventoryItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GlobalInventoryItem"> | string
    weaponName?: StringWithAggregatesFilter<"GlobalInventoryItem"> | string
    skinName?: StringWithAggregatesFilter<"GlobalInventoryItem"> | string
    skinQuality?: StringWithAggregatesFilter<"GlobalInventoryItem"> | string
    skinPrice?: FloatWithAggregatesFilter<"GlobalInventoryItem"> | number
    skinRarity?: StringWithAggregatesFilter<"GlobalInventoryItem"> | string
    skinImgSource?: StringWithAggregatesFilter<"GlobalInventoryItem"> | string
    stattrack?: BoolWithAggregatesFilter<"GlobalInventoryItem"> | boolean
  }

  export type CaseBattleWhereInput = {
    AND?: CaseBattleWhereInput | CaseBattleWhereInput[]
    OR?: CaseBattleWhereInput[]
    NOT?: CaseBattleWhereInput | CaseBattleWhereInput[]
    id?: IntFilter<"CaseBattle"> | number
    totalPrice?: FloatFilter<"CaseBattle"> | number
    totalCases?: IntFilter<"CaseBattle"> | number
    owner?: StringFilter<"CaseBattle"> | string
    finished?: BoolFilter<"CaseBattle"> | boolean
    players?: JsonFilter<"CaseBattle">
    playerCount?: IntFilter<"CaseBattle"> | number
    caseData?: JsonNullableListFilter<"CaseBattle">
    drops?: JsonFilter<"CaseBattle">
    wonItems?: JsonFilter<"CaseBattle">
    public?: BoolFilter<"CaseBattle"> | boolean
    joinKey?: StringNullableFilter<"CaseBattle"> | string | null
    mode?: StringFilter<"CaseBattle"> | string
    winner?: IntNullableFilter<"CaseBattle"> | number | null
    createdAt?: DateTimeFilter<"CaseBattle"> | Date | string
  }

  export type CaseBattleOrderByWithRelationInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    totalCases?: SortOrder
    owner?: SortOrder
    finished?: SortOrder
    players?: SortOrder
    playerCount?: SortOrder
    caseData?: SortOrder
    drops?: SortOrder
    wonItems?: SortOrder
    public?: SortOrder
    joinKey?: SortOrderInput | SortOrder
    mode?: SortOrder
    winner?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type CaseBattleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CaseBattleWhereInput | CaseBattleWhereInput[]
    OR?: CaseBattleWhereInput[]
    NOT?: CaseBattleWhereInput | CaseBattleWhereInput[]
    totalPrice?: FloatFilter<"CaseBattle"> | number
    totalCases?: IntFilter<"CaseBattle"> | number
    owner?: StringFilter<"CaseBattle"> | string
    finished?: BoolFilter<"CaseBattle"> | boolean
    players?: JsonFilter<"CaseBattle">
    playerCount?: IntFilter<"CaseBattle"> | number
    caseData?: JsonNullableListFilter<"CaseBattle">
    drops?: JsonFilter<"CaseBattle">
    wonItems?: JsonFilter<"CaseBattle">
    public?: BoolFilter<"CaseBattle"> | boolean
    joinKey?: StringNullableFilter<"CaseBattle"> | string | null
    mode?: StringFilter<"CaseBattle"> | string
    winner?: IntNullableFilter<"CaseBattle"> | number | null
    createdAt?: DateTimeFilter<"CaseBattle"> | Date | string
  }, "id">

  export type CaseBattleOrderByWithAggregationInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    totalCases?: SortOrder
    owner?: SortOrder
    finished?: SortOrder
    players?: SortOrder
    playerCount?: SortOrder
    caseData?: SortOrder
    drops?: SortOrder
    wonItems?: SortOrder
    public?: SortOrder
    joinKey?: SortOrderInput | SortOrder
    mode?: SortOrder
    winner?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CaseBattleCountOrderByAggregateInput
    _avg?: CaseBattleAvgOrderByAggregateInput
    _max?: CaseBattleMaxOrderByAggregateInput
    _min?: CaseBattleMinOrderByAggregateInput
    _sum?: CaseBattleSumOrderByAggregateInput
  }

  export type CaseBattleScalarWhereWithAggregatesInput = {
    AND?: CaseBattleScalarWhereWithAggregatesInput | CaseBattleScalarWhereWithAggregatesInput[]
    OR?: CaseBattleScalarWhereWithAggregatesInput[]
    NOT?: CaseBattleScalarWhereWithAggregatesInput | CaseBattleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CaseBattle"> | number
    totalPrice?: FloatWithAggregatesFilter<"CaseBattle"> | number
    totalCases?: IntWithAggregatesFilter<"CaseBattle"> | number
    owner?: StringWithAggregatesFilter<"CaseBattle"> | string
    finished?: BoolWithAggregatesFilter<"CaseBattle"> | boolean
    players?: JsonWithAggregatesFilter<"CaseBattle">
    playerCount?: IntWithAggregatesFilter<"CaseBattle"> | number
    caseData?: JsonNullableListFilter<"CaseBattle">
    drops?: JsonWithAggregatesFilter<"CaseBattle">
    wonItems?: JsonWithAggregatesFilter<"CaseBattle">
    public?: BoolWithAggregatesFilter<"CaseBattle"> | boolean
    joinKey?: StringNullableWithAggregatesFilter<"CaseBattle"> | string | null
    mode?: StringWithAggregatesFilter<"CaseBattle"> | string
    winner?: IntNullableWithAggregatesFilter<"CaseBattle"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CaseBattle"> | Date | string
  }

  export type UserCreateInput = {
    id: string
    username: string
    passwordHash: string
    balance?: number
    goldBalance?: number
    sandboxMode?: boolean
    pfpUrl?: string
    language?: string
    inventory?: ItemCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    username: string
    passwordHash: string
    balance?: number
    goldBalance?: number
    sandboxMode?: boolean
    pfpUrl?: string
    language?: string
    inventory?: ItemUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    goldBalance?: IntFieldUpdateOperationsInput | number
    sandboxMode?: BoolFieldUpdateOperationsInput | boolean
    pfpUrl?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    inventory?: ItemUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    goldBalance?: IntFieldUpdateOperationsInput | number
    sandboxMode?: BoolFieldUpdateOperationsInput | boolean
    pfpUrl?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    inventory?: ItemUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    username: string
    passwordHash: string
    balance?: number
    goldBalance?: number
    sandboxMode?: boolean
    pfpUrl?: string
    language?: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    goldBalance?: IntFieldUpdateOperationsInput | number
    sandboxMode?: BoolFieldUpdateOperationsInput | boolean
    pfpUrl?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    goldBalance?: IntFieldUpdateOperationsInput | number
    sandboxMode?: BoolFieldUpdateOperationsInput | boolean
    pfpUrl?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type ItemCreateInput = {
    dropId: string
    origin: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
    globalInvItem: GlobalInventoryItemCreateNestedOneWithoutItemInput
    owner: UserCreateNestedOneWithoutInventoryInput
  }

  export type ItemUncheckedCreateInput = {
    dropId: string
    ownerId: string
    origin: string
    globalInvID: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
  }

  export type ItemUpdateInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
    globalInvItem?: GlobalInventoryItemUpdateOneRequiredWithoutItemNestedInput
    owner?: UserUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemCreateManyInput = {
    dropId: string
    ownerId: string
    origin: string
    globalInvID: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
  }

  export type ItemUpdateManyMutationInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemUncheckedUpdateManyInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionCreateInput = {
    id: string
    userId: string
  }

  export type SessionUncheckedCreateInput = {
    id: string
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id: string
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseCreateInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
    section?: CaseSectionCreateNestedOneWithoutCasesInput
    drops?: CaseDropCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    category?: string | null
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
    drops?: CaseDropUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseUpdateInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
    section?: CaseSectionUpdateOneWithoutCasesNestedInput
    drops?: CaseDropUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
    drops?: CaseDropUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateManyInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    category?: string | null
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
  }

  export type CaseUpdateManyMutationInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaseUncheckedUpdateManyInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaseSectionCreateInput = {
    id: string
    name: string
    rowSpan: number
    colSpan: number
    ratio: string
    position: number
    cases?: CaseCreateNestedManyWithoutSectionInput
  }

  export type CaseSectionUncheckedCreateInput = {
    id: string
    name: string
    rowSpan: number
    colSpan: number
    ratio: string
    position: number
    cases?: CaseUncheckedCreateNestedManyWithoutSectionInput
  }

  export type CaseSectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rowSpan?: IntFieldUpdateOperationsInput | number
    colSpan?: IntFieldUpdateOperationsInput | number
    ratio?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    cases?: CaseUpdateManyWithoutSectionNestedInput
  }

  export type CaseSectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rowSpan?: IntFieldUpdateOperationsInput | number
    colSpan?: IntFieldUpdateOperationsInput | number
    ratio?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    cases?: CaseUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type CaseSectionCreateManyInput = {
    id: string
    name: string
    rowSpan: number
    colSpan: number
    ratio: string
    position: number
  }

  export type CaseSectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rowSpan?: IntFieldUpdateOperationsInput | number
    colSpan?: IntFieldUpdateOperationsInput | number
    ratio?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type CaseSectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rowSpan?: IntFieldUpdateOperationsInput | number
    colSpan?: IntFieldUpdateOperationsInput | number
    ratio?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type CaseDropCreateInput = {
    id: string
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
    globalInvItem: GlobalInventoryItemCreateNestedOneWithoutCaseDopInput
    case: CaseCreateNestedOneWithoutDropsInput
  }

  export type CaseDropUncheckedCreateInput = {
    id: string
    globalInvID: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    parentCase: string
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
  }

  export type CaseDropUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
    globalInvItem?: GlobalInventoryItemUpdateOneRequiredWithoutCaseDopNestedInput
    case?: CaseUpdateOneRequiredWithoutDropsNestedInput
  }

  export type CaseDropUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    parentCase?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
  }

  export type CaseDropCreateManyInput = {
    id: string
    globalInvID: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    parentCase: string
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
  }

  export type CaseDropUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
  }

  export type CaseDropUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    parentCase?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
  }

  export type GlobalInventoryItemCreateInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    CaseDop?: CaseDropCreateNestedManyWithoutGlobalInvItemInput
    Item?: ItemCreateNestedManyWithoutGlobalInvItemInput
  }

  export type GlobalInventoryItemUncheckedCreateInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    CaseDop?: CaseDropUncheckedCreateNestedManyWithoutGlobalInvItemInput
    Item?: ItemUncheckedCreateNestedManyWithoutGlobalInvItemInput
  }

  export type GlobalInventoryItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    CaseDop?: CaseDropUpdateManyWithoutGlobalInvItemNestedInput
    Item?: ItemUpdateManyWithoutGlobalInvItemNestedInput
  }

  export type GlobalInventoryItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    CaseDop?: CaseDropUncheckedUpdateManyWithoutGlobalInvItemNestedInput
    Item?: ItemUncheckedUpdateManyWithoutGlobalInvItemNestedInput
  }

  export type GlobalInventoryItemCreateManyInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
  }

  export type GlobalInventoryItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GlobalInventoryItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CaseBattleCreateInput = {
    totalPrice: number
    totalCases: number
    owner: string
    finished?: boolean
    players: JsonNullValueInput | InputJsonValue
    playerCount: number
    caseData?: CaseBattleCreatecaseDataInput | InputJsonValue[]
    drops: JsonNullValueInput | InputJsonValue
    wonItems: JsonNullValueInput | InputJsonValue
    public: boolean
    joinKey?: string | null
    mode: string
    winner?: number | null
    createdAt?: Date | string
  }

  export type CaseBattleUncheckedCreateInput = {
    id?: number
    totalPrice: number
    totalCases: number
    owner: string
    finished?: boolean
    players: JsonNullValueInput | InputJsonValue
    playerCount: number
    caseData?: CaseBattleCreatecaseDataInput | InputJsonValue[]
    drops: JsonNullValueInput | InputJsonValue
    wonItems: JsonNullValueInput | InputJsonValue
    public: boolean
    joinKey?: string | null
    mode: string
    winner?: number | null
    createdAt?: Date | string
  }

  export type CaseBattleUpdateInput = {
    totalPrice?: FloatFieldUpdateOperationsInput | number
    totalCases?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    players?: JsonNullValueInput | InputJsonValue
    playerCount?: IntFieldUpdateOperationsInput | number
    caseData?: CaseBattleUpdatecaseDataInput | InputJsonValue[]
    drops?: JsonNullValueInput | InputJsonValue
    wonItems?: JsonNullValueInput | InputJsonValue
    public?: BoolFieldUpdateOperationsInput | boolean
    joinKey?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    winner?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseBattleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    totalCases?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    players?: JsonNullValueInput | InputJsonValue
    playerCount?: IntFieldUpdateOperationsInput | number
    caseData?: CaseBattleUpdatecaseDataInput | InputJsonValue[]
    drops?: JsonNullValueInput | InputJsonValue
    wonItems?: JsonNullValueInput | InputJsonValue
    public?: BoolFieldUpdateOperationsInput | boolean
    joinKey?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    winner?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseBattleCreateManyInput = {
    id?: number
    totalPrice: number
    totalCases: number
    owner: string
    finished?: boolean
    players: JsonNullValueInput | InputJsonValue
    playerCount: number
    caseData?: CaseBattleCreatecaseDataInput | InputJsonValue[]
    drops: JsonNullValueInput | InputJsonValue
    wonItems: JsonNullValueInput | InputJsonValue
    public: boolean
    joinKey?: string | null
    mode: string
    winner?: number | null
    createdAt?: Date | string
  }

  export type CaseBattleUpdateManyMutationInput = {
    totalPrice?: FloatFieldUpdateOperationsInput | number
    totalCases?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    players?: JsonNullValueInput | InputJsonValue
    playerCount?: IntFieldUpdateOperationsInput | number
    caseData?: CaseBattleUpdatecaseDataInput | InputJsonValue[]
    drops?: JsonNullValueInput | InputJsonValue
    wonItems?: JsonNullValueInput | InputJsonValue
    public?: BoolFieldUpdateOperationsInput | boolean
    joinKey?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    winner?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseBattleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    totalCases?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
    finished?: BoolFieldUpdateOperationsInput | boolean
    players?: JsonNullValueInput | InputJsonValue
    playerCount?: IntFieldUpdateOperationsInput | number
    caseData?: CaseBattleUpdatecaseDataInput | InputJsonValue[]
    drops?: JsonNullValueInput | InputJsonValue
    wonItems?: JsonNullValueInput | InputJsonValue
    public?: BoolFieldUpdateOperationsInput | boolean
    joinKey?: NullableStringFieldUpdateOperationsInput | string | null
    mode?: StringFieldUpdateOperationsInput | string
    winner?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    balance?: SortOrder
    goldBalance?: SortOrder
    sandboxMode?: SortOrder
    pfpUrl?: SortOrder
    language?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    balance?: SortOrder
    goldBalance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    balance?: SortOrder
    goldBalance?: SortOrder
    sandboxMode?: SortOrder
    pfpUrl?: SortOrder
    language?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    balance?: SortOrder
    goldBalance?: SortOrder
    sandboxMode?: SortOrder
    pfpUrl?: SortOrder
    language?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    balance?: SortOrder
    goldBalance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GlobalInventoryItemRelationFilter = {
    is?: GlobalInventoryItemWhereInput
    isNot?: GlobalInventoryItemWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ItemCountOrderByAggregateInput = {
    dropId?: SortOrder
    ownerId?: SortOrder
    origin?: SortOrder
    globalInvID?: SortOrder
    dropDate?: SortOrder
    sold?: SortOrder
    upgraded?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    dropId?: SortOrder
    ownerId?: SortOrder
    origin?: SortOrder
    globalInvID?: SortOrder
    dropDate?: SortOrder
    sold?: SortOrder
    upgraded?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    dropId?: SortOrder
    ownerId?: SortOrder
    origin?: SortOrder
    globalInvID?: SortOrder
    dropDate?: SortOrder
    sold?: SortOrder
    upgraded?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CaseSectionNullableRelationFilter = {
    is?: CaseSectionWhereInput | null
    isNot?: CaseSectionWhereInput | null
  }

  export type CaseDropListRelationFilter = {
    every?: CaseDropWhereInput
    some?: CaseDropWhereInput
    none?: CaseDropWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CaseDropOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseCountOrderByAggregateInput = {
    urlName?: SortOrder
    websiteName?: SortOrder
    price?: SortOrder
    expired?: SortOrder
    category?: SortOrder
    goldenCase?: SortOrder
    imgName?: SortOrder
    positionInGrid?: SortOrder
  }

  export type CaseAvgOrderByAggregateInput = {
    price?: SortOrder
    positionInGrid?: SortOrder
  }

  export type CaseMaxOrderByAggregateInput = {
    urlName?: SortOrder
    websiteName?: SortOrder
    price?: SortOrder
    expired?: SortOrder
    category?: SortOrder
    goldenCase?: SortOrder
    imgName?: SortOrder
    positionInGrid?: SortOrder
  }

  export type CaseMinOrderByAggregateInput = {
    urlName?: SortOrder
    websiteName?: SortOrder
    price?: SortOrder
    expired?: SortOrder
    category?: SortOrder
    goldenCase?: SortOrder
    imgName?: SortOrder
    positionInGrid?: SortOrder
  }

  export type CaseSumOrderByAggregateInput = {
    price?: SortOrder
    positionInGrid?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CaseListRelationFilter = {
    every?: CaseWhereInput
    some?: CaseWhereInput
    none?: CaseWhereInput
  }

  export type CaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseSectionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    rowSpan?: SortOrder
    colSpan?: SortOrder
    ratio?: SortOrder
    position?: SortOrder
  }

  export type CaseSectionAvgOrderByAggregateInput = {
    rowSpan?: SortOrder
    colSpan?: SortOrder
    position?: SortOrder
  }

  export type CaseSectionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    rowSpan?: SortOrder
    colSpan?: SortOrder
    ratio?: SortOrder
    position?: SortOrder
  }

  export type CaseSectionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    rowSpan?: SortOrder
    colSpan?: SortOrder
    ratio?: SortOrder
    position?: SortOrder
  }

  export type CaseSectionSumOrderByAggregateInput = {
    rowSpan?: SortOrder
    colSpan?: SortOrder
    position?: SortOrder
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CaseRelationFilter = {
    is?: CaseWhereInput
    isNot?: CaseWhereInput
  }

  export type CaseDropParentCaseWeaponNameSkinNameSkinQualityCompoundUniqueInput = {
    parentCase: string
    weaponName: string
    skinName: string
    skinQuality: string
  }

  export type CaseDropCountOrderByAggregateInput = {
    id?: SortOrder
    globalInvID?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
    parentCase?: SortOrder
    displayOdds?: SortOrder
    oddsRange?: SortOrder
    priceRange?: SortOrder
    displayChance?: SortOrder
  }

  export type CaseDropAvgOrderByAggregateInput = {
    skinPrice?: SortOrder
    oddsRange?: SortOrder
  }

  export type CaseDropMaxOrderByAggregateInput = {
    id?: SortOrder
    globalInvID?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
    parentCase?: SortOrder
    displayOdds?: SortOrder
    priceRange?: SortOrder
    displayChance?: SortOrder
  }

  export type CaseDropMinOrderByAggregateInput = {
    id?: SortOrder
    globalInvID?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
    parentCase?: SortOrder
    displayOdds?: SortOrder
    priceRange?: SortOrder
    displayChance?: SortOrder
  }

  export type CaseDropSumOrderByAggregateInput = {
    skinPrice?: SortOrder
    oddsRange?: SortOrder
  }

  export type GlobalInventoryItemWeaponNameSkinNameSkinQualityStattrackCompoundUniqueInput = {
    weaponName: string
    skinName: string
    skinQuality: string
    stattrack: boolean
  }

  export type GlobalInventoryItemIdWeaponNameSkinNameSkinQualitySkinPriceSkinRaritySkinImgSourceStattrackCompoundUniqueInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack: boolean
  }

  export type GlobalInventoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
  }

  export type GlobalInventoryItemAvgOrderByAggregateInput = {
    skinPrice?: SortOrder
  }

  export type GlobalInventoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
  }

  export type GlobalInventoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    weaponName?: SortOrder
    skinName?: SortOrder
    skinQuality?: SortOrder
    skinPrice?: SortOrder
    skinRarity?: SortOrder
    skinImgSource?: SortOrder
    stattrack?: SortOrder
  }

  export type GlobalInventoryItemSumOrderByAggregateInput = {
    skinPrice?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableListFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CaseBattleCountOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    totalCases?: SortOrder
    owner?: SortOrder
    finished?: SortOrder
    players?: SortOrder
    playerCount?: SortOrder
    caseData?: SortOrder
    drops?: SortOrder
    wonItems?: SortOrder
    public?: SortOrder
    joinKey?: SortOrder
    mode?: SortOrder
    winner?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseBattleAvgOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    totalCases?: SortOrder
    playerCount?: SortOrder
    winner?: SortOrder
  }

  export type CaseBattleMaxOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    totalCases?: SortOrder
    owner?: SortOrder
    finished?: SortOrder
    playerCount?: SortOrder
    public?: SortOrder
    joinKey?: SortOrder
    mode?: SortOrder
    winner?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseBattleMinOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    totalCases?: SortOrder
    owner?: SortOrder
    finished?: SortOrder
    playerCount?: SortOrder
    public?: SortOrder
    joinKey?: SortOrder
    mode?: SortOrder
    winner?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseBattleSumOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    totalCases?: SortOrder
    playerCount?: SortOrder
    winner?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ItemCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ItemCreateWithoutOwnerInput, ItemUncheckedCreateWithoutOwnerInput> | ItemCreateWithoutOwnerInput[] | ItemUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOwnerInput | ItemCreateOrConnectWithoutOwnerInput[]
    createMany?: ItemCreateManyOwnerInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ItemCreateWithoutOwnerInput, ItemUncheckedCreateWithoutOwnerInput> | ItemCreateWithoutOwnerInput[] | ItemUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOwnerInput | ItemCreateOrConnectWithoutOwnerInput[]
    createMany?: ItemCreateManyOwnerInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ItemUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ItemCreateWithoutOwnerInput, ItemUncheckedCreateWithoutOwnerInput> | ItemCreateWithoutOwnerInput[] | ItemUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOwnerInput | ItemCreateOrConnectWithoutOwnerInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutOwnerInput | ItemUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ItemCreateManyOwnerInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutOwnerInput | ItemUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutOwnerInput | ItemUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ItemCreateWithoutOwnerInput, ItemUncheckedCreateWithoutOwnerInput> | ItemCreateWithoutOwnerInput[] | ItemUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutOwnerInput | ItemCreateOrConnectWithoutOwnerInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutOwnerInput | ItemUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ItemCreateManyOwnerInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutOwnerInput | ItemUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutOwnerInput | ItemUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type GlobalInventoryItemCreateNestedOneWithoutItemInput = {
    create?: XOR<GlobalInventoryItemCreateWithoutItemInput, GlobalInventoryItemUncheckedCreateWithoutItemInput>
    connectOrCreate?: GlobalInventoryItemCreateOrConnectWithoutItemInput
    connect?: GlobalInventoryItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInventoryInput = {
    create?: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GlobalInventoryItemUpdateOneRequiredWithoutItemNestedInput = {
    create?: XOR<GlobalInventoryItemCreateWithoutItemInput, GlobalInventoryItemUncheckedCreateWithoutItemInput>
    connectOrCreate?: GlobalInventoryItemCreateOrConnectWithoutItemInput
    upsert?: GlobalInventoryItemUpsertWithoutItemInput
    connect?: GlobalInventoryItemWhereUniqueInput
    update?: XOR<XOR<GlobalInventoryItemUpdateToOneWithWhereWithoutItemInput, GlobalInventoryItemUpdateWithoutItemInput>, GlobalInventoryItemUncheckedUpdateWithoutItemInput>
  }

  export type UserUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryInput
    upsert?: UserUpsertWithoutInventoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInventoryInput, UserUpdateWithoutInventoryInput>, UserUncheckedUpdateWithoutInventoryInput>
  }

  export type CaseSectionCreateNestedOneWithoutCasesInput = {
    create?: XOR<CaseSectionCreateWithoutCasesInput, CaseSectionUncheckedCreateWithoutCasesInput>
    connectOrCreate?: CaseSectionCreateOrConnectWithoutCasesInput
    connect?: CaseSectionWhereUniqueInput
  }

  export type CaseDropCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseDropCreateWithoutCaseInput, CaseDropUncheckedCreateWithoutCaseInput> | CaseDropCreateWithoutCaseInput[] | CaseDropUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutCaseInput | CaseDropCreateOrConnectWithoutCaseInput[]
    createMany?: CaseDropCreateManyCaseInputEnvelope
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
  }

  export type CaseDropUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseDropCreateWithoutCaseInput, CaseDropUncheckedCreateWithoutCaseInput> | CaseDropCreateWithoutCaseInput[] | CaseDropUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutCaseInput | CaseDropCreateOrConnectWithoutCaseInput[]
    createMany?: CaseDropCreateManyCaseInputEnvelope
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CaseSectionUpdateOneWithoutCasesNestedInput = {
    create?: XOR<CaseSectionCreateWithoutCasesInput, CaseSectionUncheckedCreateWithoutCasesInput>
    connectOrCreate?: CaseSectionCreateOrConnectWithoutCasesInput
    upsert?: CaseSectionUpsertWithoutCasesInput
    disconnect?: CaseSectionWhereInput | boolean
    delete?: CaseSectionWhereInput | boolean
    connect?: CaseSectionWhereUniqueInput
    update?: XOR<XOR<CaseSectionUpdateToOneWithWhereWithoutCasesInput, CaseSectionUpdateWithoutCasesInput>, CaseSectionUncheckedUpdateWithoutCasesInput>
  }

  export type CaseDropUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseDropCreateWithoutCaseInput, CaseDropUncheckedCreateWithoutCaseInput> | CaseDropCreateWithoutCaseInput[] | CaseDropUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutCaseInput | CaseDropCreateOrConnectWithoutCaseInput[]
    upsert?: CaseDropUpsertWithWhereUniqueWithoutCaseInput | CaseDropUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseDropCreateManyCaseInputEnvelope
    set?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    disconnect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    delete?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    update?: CaseDropUpdateWithWhereUniqueWithoutCaseInput | CaseDropUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseDropUpdateManyWithWhereWithoutCaseInput | CaseDropUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseDropScalarWhereInput | CaseDropScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CaseDropUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseDropCreateWithoutCaseInput, CaseDropUncheckedCreateWithoutCaseInput> | CaseDropCreateWithoutCaseInput[] | CaseDropUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutCaseInput | CaseDropCreateOrConnectWithoutCaseInput[]
    upsert?: CaseDropUpsertWithWhereUniqueWithoutCaseInput | CaseDropUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseDropCreateManyCaseInputEnvelope
    set?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    disconnect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    delete?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    update?: CaseDropUpdateWithWhereUniqueWithoutCaseInput | CaseDropUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseDropUpdateManyWithWhereWithoutCaseInput | CaseDropUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseDropScalarWhereInput | CaseDropScalarWhereInput[]
  }

  export type CaseCreateNestedManyWithoutSectionInput = {
    create?: XOR<CaseCreateWithoutSectionInput, CaseUncheckedCreateWithoutSectionInput> | CaseCreateWithoutSectionInput[] | CaseUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutSectionInput | CaseCreateOrConnectWithoutSectionInput[]
    createMany?: CaseCreateManySectionInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<CaseCreateWithoutSectionInput, CaseUncheckedCreateWithoutSectionInput> | CaseCreateWithoutSectionInput[] | CaseUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutSectionInput | CaseCreateOrConnectWithoutSectionInput[]
    createMany?: CaseCreateManySectionInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type CaseUpdateManyWithoutSectionNestedInput = {
    create?: XOR<CaseCreateWithoutSectionInput, CaseUncheckedCreateWithoutSectionInput> | CaseCreateWithoutSectionInput[] | CaseUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutSectionInput | CaseCreateOrConnectWithoutSectionInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutSectionInput | CaseUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: CaseCreateManySectionInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutSectionInput | CaseUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutSectionInput | CaseUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<CaseCreateWithoutSectionInput, CaseUncheckedCreateWithoutSectionInput> | CaseCreateWithoutSectionInput[] | CaseUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutSectionInput | CaseCreateOrConnectWithoutSectionInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutSectionInput | CaseUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: CaseCreateManySectionInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutSectionInput | CaseUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutSectionInput | CaseUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type CaseDropCreateoddsRangeInput = {
    set: number[]
  }

  export type GlobalInventoryItemCreateNestedOneWithoutCaseDopInput = {
    create?: XOR<GlobalInventoryItemCreateWithoutCaseDopInput, GlobalInventoryItemUncheckedCreateWithoutCaseDopInput>
    connectOrCreate?: GlobalInventoryItemCreateOrConnectWithoutCaseDopInput
    connect?: GlobalInventoryItemWhereUniqueInput
  }

  export type CaseCreateNestedOneWithoutDropsInput = {
    create?: XOR<CaseCreateWithoutDropsInput, CaseUncheckedCreateWithoutDropsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutDropsInput
    connect?: CaseWhereUniqueInput
  }

  export type CaseDropUpdateoddsRangeInput = {
    set?: number[]
    push?: number | number[]
  }

  export type GlobalInventoryItemUpdateOneRequiredWithoutCaseDopNestedInput = {
    create?: XOR<GlobalInventoryItemCreateWithoutCaseDopInput, GlobalInventoryItemUncheckedCreateWithoutCaseDopInput>
    connectOrCreate?: GlobalInventoryItemCreateOrConnectWithoutCaseDopInput
    upsert?: GlobalInventoryItemUpsertWithoutCaseDopInput
    connect?: GlobalInventoryItemWhereUniqueInput
    update?: XOR<XOR<GlobalInventoryItemUpdateToOneWithWhereWithoutCaseDopInput, GlobalInventoryItemUpdateWithoutCaseDopInput>, GlobalInventoryItemUncheckedUpdateWithoutCaseDopInput>
  }

  export type CaseUpdateOneRequiredWithoutDropsNestedInput = {
    create?: XOR<CaseCreateWithoutDropsInput, CaseUncheckedCreateWithoutDropsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutDropsInput
    upsert?: CaseUpsertWithoutDropsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutDropsInput, CaseUpdateWithoutDropsInput>, CaseUncheckedUpdateWithoutDropsInput>
  }

  export type CaseDropCreateNestedManyWithoutGlobalInvItemInput = {
    create?: XOR<CaseDropCreateWithoutGlobalInvItemInput, CaseDropUncheckedCreateWithoutGlobalInvItemInput> | CaseDropCreateWithoutGlobalInvItemInput[] | CaseDropUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutGlobalInvItemInput | CaseDropCreateOrConnectWithoutGlobalInvItemInput[]
    createMany?: CaseDropCreateManyGlobalInvItemInputEnvelope
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutGlobalInvItemInput = {
    create?: XOR<ItemCreateWithoutGlobalInvItemInput, ItemUncheckedCreateWithoutGlobalInvItemInput> | ItemCreateWithoutGlobalInvItemInput[] | ItemUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutGlobalInvItemInput | ItemCreateOrConnectWithoutGlobalInvItemInput[]
    createMany?: ItemCreateManyGlobalInvItemInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type CaseDropUncheckedCreateNestedManyWithoutGlobalInvItemInput = {
    create?: XOR<CaseDropCreateWithoutGlobalInvItemInput, CaseDropUncheckedCreateWithoutGlobalInvItemInput> | CaseDropCreateWithoutGlobalInvItemInput[] | CaseDropUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutGlobalInvItemInput | CaseDropCreateOrConnectWithoutGlobalInvItemInput[]
    createMany?: CaseDropCreateManyGlobalInvItemInputEnvelope
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutGlobalInvItemInput = {
    create?: XOR<ItemCreateWithoutGlobalInvItemInput, ItemUncheckedCreateWithoutGlobalInvItemInput> | ItemCreateWithoutGlobalInvItemInput[] | ItemUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutGlobalInvItemInput | ItemCreateOrConnectWithoutGlobalInvItemInput[]
    createMany?: ItemCreateManyGlobalInvItemInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type CaseDropUpdateManyWithoutGlobalInvItemNestedInput = {
    create?: XOR<CaseDropCreateWithoutGlobalInvItemInput, CaseDropUncheckedCreateWithoutGlobalInvItemInput> | CaseDropCreateWithoutGlobalInvItemInput[] | CaseDropUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutGlobalInvItemInput | CaseDropCreateOrConnectWithoutGlobalInvItemInput[]
    upsert?: CaseDropUpsertWithWhereUniqueWithoutGlobalInvItemInput | CaseDropUpsertWithWhereUniqueWithoutGlobalInvItemInput[]
    createMany?: CaseDropCreateManyGlobalInvItemInputEnvelope
    set?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    disconnect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    delete?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    update?: CaseDropUpdateWithWhereUniqueWithoutGlobalInvItemInput | CaseDropUpdateWithWhereUniqueWithoutGlobalInvItemInput[]
    updateMany?: CaseDropUpdateManyWithWhereWithoutGlobalInvItemInput | CaseDropUpdateManyWithWhereWithoutGlobalInvItemInput[]
    deleteMany?: CaseDropScalarWhereInput | CaseDropScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutGlobalInvItemNestedInput = {
    create?: XOR<ItemCreateWithoutGlobalInvItemInput, ItemUncheckedCreateWithoutGlobalInvItemInput> | ItemCreateWithoutGlobalInvItemInput[] | ItemUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutGlobalInvItemInput | ItemCreateOrConnectWithoutGlobalInvItemInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutGlobalInvItemInput | ItemUpsertWithWhereUniqueWithoutGlobalInvItemInput[]
    createMany?: ItemCreateManyGlobalInvItemInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutGlobalInvItemInput | ItemUpdateWithWhereUniqueWithoutGlobalInvItemInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutGlobalInvItemInput | ItemUpdateManyWithWhereWithoutGlobalInvItemInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type CaseDropUncheckedUpdateManyWithoutGlobalInvItemNestedInput = {
    create?: XOR<CaseDropCreateWithoutGlobalInvItemInput, CaseDropUncheckedCreateWithoutGlobalInvItemInput> | CaseDropCreateWithoutGlobalInvItemInput[] | CaseDropUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: CaseDropCreateOrConnectWithoutGlobalInvItemInput | CaseDropCreateOrConnectWithoutGlobalInvItemInput[]
    upsert?: CaseDropUpsertWithWhereUniqueWithoutGlobalInvItemInput | CaseDropUpsertWithWhereUniqueWithoutGlobalInvItemInput[]
    createMany?: CaseDropCreateManyGlobalInvItemInputEnvelope
    set?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    disconnect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    delete?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    connect?: CaseDropWhereUniqueInput | CaseDropWhereUniqueInput[]
    update?: CaseDropUpdateWithWhereUniqueWithoutGlobalInvItemInput | CaseDropUpdateWithWhereUniqueWithoutGlobalInvItemInput[]
    updateMany?: CaseDropUpdateManyWithWhereWithoutGlobalInvItemInput | CaseDropUpdateManyWithWhereWithoutGlobalInvItemInput[]
    deleteMany?: CaseDropScalarWhereInput | CaseDropScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutGlobalInvItemNestedInput = {
    create?: XOR<ItemCreateWithoutGlobalInvItemInput, ItemUncheckedCreateWithoutGlobalInvItemInput> | ItemCreateWithoutGlobalInvItemInput[] | ItemUncheckedCreateWithoutGlobalInvItemInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutGlobalInvItemInput | ItemCreateOrConnectWithoutGlobalInvItemInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutGlobalInvItemInput | ItemUpsertWithWhereUniqueWithoutGlobalInvItemInput[]
    createMany?: ItemCreateManyGlobalInvItemInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutGlobalInvItemInput | ItemUpdateWithWhereUniqueWithoutGlobalInvItemInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutGlobalInvItemInput | ItemUpdateManyWithWhereWithoutGlobalInvItemInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type CaseBattleCreatecaseDataInput = {
    set: InputJsonValue[]
  }

  export type CaseBattleUpdatecaseDataInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ItemCreateWithoutOwnerInput = {
    dropId: string
    origin: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
    globalInvItem: GlobalInventoryItemCreateNestedOneWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutOwnerInput = {
    dropId: string
    origin: string
    globalInvID: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
  }

  export type ItemCreateOrConnectWithoutOwnerInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutOwnerInput, ItemUncheckedCreateWithoutOwnerInput>
  }

  export type ItemCreateManyOwnerInputEnvelope = {
    data: ItemCreateManyOwnerInput | ItemCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ItemUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutOwnerInput, ItemUncheckedUpdateWithoutOwnerInput>
    create: XOR<ItemCreateWithoutOwnerInput, ItemUncheckedCreateWithoutOwnerInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutOwnerInput, ItemUncheckedUpdateWithoutOwnerInput>
  }

  export type ItemUpdateManyWithWhereWithoutOwnerInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    dropId?: StringFilter<"Item"> | string
    ownerId?: StringFilter<"Item"> | string
    origin?: StringFilter<"Item"> | string
    globalInvID?: StringFilter<"Item"> | string
    dropDate?: DateTimeFilter<"Item"> | Date | string
    sold?: BoolFilter<"Item"> | boolean
    upgraded?: BoolFilter<"Item"> | boolean
  }

  export type GlobalInventoryItemCreateWithoutItemInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    CaseDop?: CaseDropCreateNestedManyWithoutGlobalInvItemInput
  }

  export type GlobalInventoryItemUncheckedCreateWithoutItemInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    CaseDop?: CaseDropUncheckedCreateNestedManyWithoutGlobalInvItemInput
  }

  export type GlobalInventoryItemCreateOrConnectWithoutItemInput = {
    where: GlobalInventoryItemWhereUniqueInput
    create: XOR<GlobalInventoryItemCreateWithoutItemInput, GlobalInventoryItemUncheckedCreateWithoutItemInput>
  }

  export type UserCreateWithoutInventoryInput = {
    id: string
    username: string
    passwordHash: string
    balance?: number
    goldBalance?: number
    sandboxMode?: boolean
    pfpUrl?: string
    language?: string
  }

  export type UserUncheckedCreateWithoutInventoryInput = {
    id: string
    username: string
    passwordHash: string
    balance?: number
    goldBalance?: number
    sandboxMode?: boolean
    pfpUrl?: string
    language?: string
  }

  export type UserCreateOrConnectWithoutInventoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
  }

  export type GlobalInventoryItemUpsertWithoutItemInput = {
    update: XOR<GlobalInventoryItemUpdateWithoutItemInput, GlobalInventoryItemUncheckedUpdateWithoutItemInput>
    create: XOR<GlobalInventoryItemCreateWithoutItemInput, GlobalInventoryItemUncheckedCreateWithoutItemInput>
    where?: GlobalInventoryItemWhereInput
  }

  export type GlobalInventoryItemUpdateToOneWithWhereWithoutItemInput = {
    where?: GlobalInventoryItemWhereInput
    data: XOR<GlobalInventoryItemUpdateWithoutItemInput, GlobalInventoryItemUncheckedUpdateWithoutItemInput>
  }

  export type GlobalInventoryItemUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    CaseDop?: CaseDropUpdateManyWithoutGlobalInvItemNestedInput
  }

  export type GlobalInventoryItemUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    CaseDop?: CaseDropUncheckedUpdateManyWithoutGlobalInvItemNestedInput
  }

  export type UserUpsertWithoutInventoryInput = {
    update: XOR<UserUpdateWithoutInventoryInput, UserUncheckedUpdateWithoutInventoryInput>
    create: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInventoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInventoryInput, UserUncheckedUpdateWithoutInventoryInput>
  }

  export type UserUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    goldBalance?: IntFieldUpdateOperationsInput | number
    sandboxMode?: BoolFieldUpdateOperationsInput | boolean
    pfpUrl?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    goldBalance?: IntFieldUpdateOperationsInput | number
    sandboxMode?: BoolFieldUpdateOperationsInput | boolean
    pfpUrl?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
  }

  export type CaseSectionCreateWithoutCasesInput = {
    id: string
    name: string
    rowSpan: number
    colSpan: number
    ratio: string
    position: number
  }

  export type CaseSectionUncheckedCreateWithoutCasesInput = {
    id: string
    name: string
    rowSpan: number
    colSpan: number
    ratio: string
    position: number
  }

  export type CaseSectionCreateOrConnectWithoutCasesInput = {
    where: CaseSectionWhereUniqueInput
    create: XOR<CaseSectionCreateWithoutCasesInput, CaseSectionUncheckedCreateWithoutCasesInput>
  }

  export type CaseDropCreateWithoutCaseInput = {
    id: string
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
    globalInvItem: GlobalInventoryItemCreateNestedOneWithoutCaseDopInput
  }

  export type CaseDropUncheckedCreateWithoutCaseInput = {
    id: string
    globalInvID: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
  }

  export type CaseDropCreateOrConnectWithoutCaseInput = {
    where: CaseDropWhereUniqueInput
    create: XOR<CaseDropCreateWithoutCaseInput, CaseDropUncheckedCreateWithoutCaseInput>
  }

  export type CaseDropCreateManyCaseInputEnvelope = {
    data: CaseDropCreateManyCaseInput | CaseDropCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseSectionUpsertWithoutCasesInput = {
    update: XOR<CaseSectionUpdateWithoutCasesInput, CaseSectionUncheckedUpdateWithoutCasesInput>
    create: XOR<CaseSectionCreateWithoutCasesInput, CaseSectionUncheckedCreateWithoutCasesInput>
    where?: CaseSectionWhereInput
  }

  export type CaseSectionUpdateToOneWithWhereWithoutCasesInput = {
    where?: CaseSectionWhereInput
    data: XOR<CaseSectionUpdateWithoutCasesInput, CaseSectionUncheckedUpdateWithoutCasesInput>
  }

  export type CaseSectionUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rowSpan?: IntFieldUpdateOperationsInput | number
    colSpan?: IntFieldUpdateOperationsInput | number
    ratio?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type CaseSectionUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rowSpan?: IntFieldUpdateOperationsInput | number
    colSpan?: IntFieldUpdateOperationsInput | number
    ratio?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type CaseDropUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseDropWhereUniqueInput
    update: XOR<CaseDropUpdateWithoutCaseInput, CaseDropUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseDropCreateWithoutCaseInput, CaseDropUncheckedCreateWithoutCaseInput>
  }

  export type CaseDropUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseDropWhereUniqueInput
    data: XOR<CaseDropUpdateWithoutCaseInput, CaseDropUncheckedUpdateWithoutCaseInput>
  }

  export type CaseDropUpdateManyWithWhereWithoutCaseInput = {
    where: CaseDropScalarWhereInput
    data: XOR<CaseDropUpdateManyMutationInput, CaseDropUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseDropScalarWhereInput = {
    AND?: CaseDropScalarWhereInput | CaseDropScalarWhereInput[]
    OR?: CaseDropScalarWhereInput[]
    NOT?: CaseDropScalarWhereInput | CaseDropScalarWhereInput[]
    id?: StringFilter<"CaseDrop"> | string
    globalInvID?: StringFilter<"CaseDrop"> | string
    weaponName?: StringFilter<"CaseDrop"> | string
    skinName?: StringFilter<"CaseDrop"> | string
    skinQuality?: StringFilter<"CaseDrop"> | string
    skinPrice?: FloatFilter<"CaseDrop"> | number
    skinRarity?: StringFilter<"CaseDrop"> | string
    skinImgSource?: StringFilter<"CaseDrop"> | string
    stattrack?: BoolFilter<"CaseDrop"> | boolean
    parentCase?: StringFilter<"CaseDrop"> | string
    displayOdds?: StringFilter<"CaseDrop"> | string
    oddsRange?: IntNullableListFilter<"CaseDrop">
    priceRange?: StringFilter<"CaseDrop"> | string
    displayChance?: StringFilter<"CaseDrop"> | string
  }

  export type CaseCreateWithoutSectionInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
    drops?: CaseDropCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutSectionInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
    drops?: CaseDropUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutSectionInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutSectionInput, CaseUncheckedCreateWithoutSectionInput>
  }

  export type CaseCreateManySectionInputEnvelope = {
    data: CaseCreateManySectionInput | CaseCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type CaseUpsertWithWhereUniqueWithoutSectionInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutSectionInput, CaseUncheckedUpdateWithoutSectionInput>
    create: XOR<CaseCreateWithoutSectionInput, CaseUncheckedCreateWithoutSectionInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutSectionInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutSectionInput, CaseUncheckedUpdateWithoutSectionInput>
  }

  export type CaseUpdateManyWithWhereWithoutSectionInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutSectionInput>
  }

  export type CaseScalarWhereInput = {
    AND?: CaseScalarWhereInput | CaseScalarWhereInput[]
    OR?: CaseScalarWhereInput[]
    NOT?: CaseScalarWhereInput | CaseScalarWhereInput[]
    urlName?: StringFilter<"Case"> | string
    websiteName?: StringFilter<"Case"> | string
    price?: FloatFilter<"Case"> | number
    expired?: BoolFilter<"Case"> | boolean
    category?: StringNullableFilter<"Case"> | string | null
    goldenCase?: BoolNullableFilter<"Case"> | boolean | null
    imgName?: StringFilter<"Case"> | string
    positionInGrid?: IntNullableFilter<"Case"> | number | null
  }

  export type GlobalInventoryItemCreateWithoutCaseDopInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    Item?: ItemCreateNestedManyWithoutGlobalInvItemInput
  }

  export type GlobalInventoryItemUncheckedCreateWithoutCaseDopInput = {
    id: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    Item?: ItemUncheckedCreateNestedManyWithoutGlobalInvItemInput
  }

  export type GlobalInventoryItemCreateOrConnectWithoutCaseDopInput = {
    where: GlobalInventoryItemWhereUniqueInput
    create: XOR<GlobalInventoryItemCreateWithoutCaseDopInput, GlobalInventoryItemUncheckedCreateWithoutCaseDopInput>
  }

  export type CaseCreateWithoutDropsInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
    section?: CaseSectionCreateNestedOneWithoutCasesInput
  }

  export type CaseUncheckedCreateWithoutDropsInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    category?: string | null
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
  }

  export type CaseCreateOrConnectWithoutDropsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutDropsInput, CaseUncheckedCreateWithoutDropsInput>
  }

  export type GlobalInventoryItemUpsertWithoutCaseDopInput = {
    update: XOR<GlobalInventoryItemUpdateWithoutCaseDopInput, GlobalInventoryItemUncheckedUpdateWithoutCaseDopInput>
    create: XOR<GlobalInventoryItemCreateWithoutCaseDopInput, GlobalInventoryItemUncheckedCreateWithoutCaseDopInput>
    where?: GlobalInventoryItemWhereInput
  }

  export type GlobalInventoryItemUpdateToOneWithWhereWithoutCaseDopInput = {
    where?: GlobalInventoryItemWhereInput
    data: XOR<GlobalInventoryItemUpdateWithoutCaseDopInput, GlobalInventoryItemUncheckedUpdateWithoutCaseDopInput>
  }

  export type GlobalInventoryItemUpdateWithoutCaseDopInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    Item?: ItemUpdateManyWithoutGlobalInvItemNestedInput
  }

  export type GlobalInventoryItemUncheckedUpdateWithoutCaseDopInput = {
    id?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    Item?: ItemUncheckedUpdateManyWithoutGlobalInvItemNestedInput
  }

  export type CaseUpsertWithoutDropsInput = {
    update: XOR<CaseUpdateWithoutDropsInput, CaseUncheckedUpdateWithoutDropsInput>
    create: XOR<CaseCreateWithoutDropsInput, CaseUncheckedCreateWithoutDropsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutDropsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutDropsInput, CaseUncheckedUpdateWithoutDropsInput>
  }

  export type CaseUpdateWithoutDropsInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
    section?: CaseSectionUpdateOneWithoutCasesNestedInput
  }

  export type CaseUncheckedUpdateWithoutDropsInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaseDropCreateWithoutGlobalInvItemInput = {
    id: string
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
    case: CaseCreateNestedOneWithoutDropsInput
  }

  export type CaseDropUncheckedCreateWithoutGlobalInvItemInput = {
    id: string
    parentCase: string
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
  }

  export type CaseDropCreateOrConnectWithoutGlobalInvItemInput = {
    where: CaseDropWhereUniqueInput
    create: XOR<CaseDropCreateWithoutGlobalInvItemInput, CaseDropUncheckedCreateWithoutGlobalInvItemInput>
  }

  export type CaseDropCreateManyGlobalInvItemInputEnvelope = {
    data: CaseDropCreateManyGlobalInvItemInput | CaseDropCreateManyGlobalInvItemInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutGlobalInvItemInput = {
    dropId: string
    origin: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
    owner: UserCreateNestedOneWithoutInventoryInput
  }

  export type ItemUncheckedCreateWithoutGlobalInvItemInput = {
    dropId: string
    ownerId: string
    origin: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
  }

  export type ItemCreateOrConnectWithoutGlobalInvItemInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutGlobalInvItemInput, ItemUncheckedCreateWithoutGlobalInvItemInput>
  }

  export type ItemCreateManyGlobalInvItemInputEnvelope = {
    data: ItemCreateManyGlobalInvItemInput | ItemCreateManyGlobalInvItemInput[]
    skipDuplicates?: boolean
  }

  export type CaseDropUpsertWithWhereUniqueWithoutGlobalInvItemInput = {
    where: CaseDropWhereUniqueInput
    update: XOR<CaseDropUpdateWithoutGlobalInvItemInput, CaseDropUncheckedUpdateWithoutGlobalInvItemInput>
    create: XOR<CaseDropCreateWithoutGlobalInvItemInput, CaseDropUncheckedCreateWithoutGlobalInvItemInput>
  }

  export type CaseDropUpdateWithWhereUniqueWithoutGlobalInvItemInput = {
    where: CaseDropWhereUniqueInput
    data: XOR<CaseDropUpdateWithoutGlobalInvItemInput, CaseDropUncheckedUpdateWithoutGlobalInvItemInput>
  }

  export type CaseDropUpdateManyWithWhereWithoutGlobalInvItemInput = {
    where: CaseDropScalarWhereInput
    data: XOR<CaseDropUpdateManyMutationInput, CaseDropUncheckedUpdateManyWithoutGlobalInvItemInput>
  }

  export type ItemUpsertWithWhereUniqueWithoutGlobalInvItemInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutGlobalInvItemInput, ItemUncheckedUpdateWithoutGlobalInvItemInput>
    create: XOR<ItemCreateWithoutGlobalInvItemInput, ItemUncheckedCreateWithoutGlobalInvItemInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutGlobalInvItemInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutGlobalInvItemInput, ItemUncheckedUpdateWithoutGlobalInvItemInput>
  }

  export type ItemUpdateManyWithWhereWithoutGlobalInvItemInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutGlobalInvItemInput>
  }

  export type ItemCreateManyOwnerInput = {
    dropId: string
    origin: string
    globalInvID: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
  }

  export type ItemUpdateWithoutOwnerInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
    globalInvItem?: GlobalInventoryItemUpdateOneRequiredWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutOwnerInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemUncheckedUpdateManyWithoutOwnerInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CaseDropCreateManyCaseInput = {
    id: string
    globalInvID: string
    weaponName: string
    skinName: string
    skinQuality: string
    skinPrice: number
    skinRarity: string
    skinImgSource: string
    stattrack?: boolean
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
  }

  export type CaseDropUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
    globalInvItem?: GlobalInventoryItemUpdateOneRequiredWithoutCaseDopNestedInput
  }

  export type CaseDropUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
  }

  export type CaseDropUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalInvID?: StringFieldUpdateOperationsInput | string
    weaponName?: StringFieldUpdateOperationsInput | string
    skinName?: StringFieldUpdateOperationsInput | string
    skinQuality?: StringFieldUpdateOperationsInput | string
    skinPrice?: FloatFieldUpdateOperationsInput | number
    skinRarity?: StringFieldUpdateOperationsInput | string
    skinImgSource?: StringFieldUpdateOperationsInput | string
    stattrack?: BoolFieldUpdateOperationsInput | boolean
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
  }

  export type CaseCreateManySectionInput = {
    urlName: string
    websiteName: string
    price: number
    expired?: boolean
    goldenCase?: boolean | null
    imgName: string
    positionInGrid?: number | null
  }

  export type CaseUpdateWithoutSectionInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
    drops?: CaseDropUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutSectionInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
    drops?: CaseDropUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutSectionInput = {
    urlName?: StringFieldUpdateOperationsInput | string
    websiteName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    expired?: BoolFieldUpdateOperationsInput | boolean
    goldenCase?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imgName?: StringFieldUpdateOperationsInput | string
    positionInGrid?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaseDropCreateManyGlobalInvItemInput = {
    id: string
    parentCase: string
    displayOdds: string
    oddsRange?: CaseDropCreateoddsRangeInput | number[]
    priceRange: string
    displayChance: string
  }

  export type ItemCreateManyGlobalInvItemInput = {
    dropId: string
    ownerId: string
    origin: string
    dropDate?: Date | string
    sold?: boolean
    upgraded?: boolean
  }

  export type CaseDropUpdateWithoutGlobalInvItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
    case?: CaseUpdateOneRequiredWithoutDropsNestedInput
  }

  export type CaseDropUncheckedUpdateWithoutGlobalInvItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentCase?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
  }

  export type CaseDropUncheckedUpdateManyWithoutGlobalInvItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentCase?: StringFieldUpdateOperationsInput | string
    displayOdds?: StringFieldUpdateOperationsInput | string
    oddsRange?: CaseDropUpdateoddsRangeInput | number[]
    priceRange?: StringFieldUpdateOperationsInput | string
    displayChance?: StringFieldUpdateOperationsInput | string
  }

  export type ItemUpdateWithoutGlobalInvItemInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type ItemUncheckedUpdateWithoutGlobalInvItemInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemUncheckedUpdateManyWithoutGlobalInvItemInput = {
    dropId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    dropDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sold?: BoolFieldUpdateOperationsInput | boolean
    upgraded?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseCountOutputTypeDefaultArgs instead
     */
    export type CaseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseSectionCountOutputTypeDefaultArgs instead
     */
    export type CaseSectionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseSectionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlobalInventoryItemCountOutputTypeDefaultArgs instead
     */
    export type GlobalInventoryItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlobalInventoryItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseDefaultArgs instead
     */
    export type CaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseSectionDefaultArgs instead
     */
    export type CaseSectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseSectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseDropDefaultArgs instead
     */
    export type CaseDropArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseDropDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlobalInventoryItemDefaultArgs instead
     */
    export type GlobalInventoryItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlobalInventoryItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaseBattleDefaultArgs instead
     */
    export type CaseBattleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaseBattleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}